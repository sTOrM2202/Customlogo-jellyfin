<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaBrowser.Providers</name>
    </assembly>
    <members>
        <member name="M:MediaBrowser.Providers.Books.AudioBookMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.AudioBook},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.AudioBook},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Books.BookMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Book},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Book},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.EnableUpdatingGenresFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.EnableUpdatingOfficialRatingFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.EnableUpdatingStudiosFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.EnableUpdatingPremiereDateFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Entities.Movies.BoxSet)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Movies.BoxSet},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Movies.BoxSet},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.BeforeSaveInternal(MediaBrowser.Controller.Entities.Movies.BoxSet,System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Chapters.ChapterManager.SaveChapters(System.Guid,System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Entities.ChapterInfo})">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Folders.FolderMetadataService.Order">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Lyric.LrcLyricParser">
            <summary>
            LRC Lyric Parser.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LrcLyricParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Lyric.LrcLyricParser"/> class.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Lyric.LrcLyricParser.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Lyric.LrcLyricParser.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LrcLyricParser.ParseLyrics(MediaBrowser.Model.Lyrics.LyricFile)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Lyric.LyricManager">
            <summary>
            Lyric Manager.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Lyric.LyricManager},MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryMonitor,MediaBrowser.Controller.Library.IMediaSourceManager,System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Lyrics.ILyricProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Lyrics.ILyricParser})">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Lyric.LyricManager"/> class.
            </summary>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="libraryMonitor">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryMonitor"/> interface.</param>
            <param name="mediaSourceManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.IMediaSourceManager"/> interface.</param>
            <param name="lyricProviders">The list of <see cref="T:MediaBrowser.Controller.Lyrics.ILyricProvider"/>.</param>
            <param name="lyricParsers">The list of <see cref="T:MediaBrowser.Controller.Lyrics.ILyricParser"/>.</param>
        </member>
        <member name="E:MediaBrowser.Providers.Lyric.LyricManager.LyricDownloadFailure">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.SearchLyricsAsync(MediaBrowser.Controller.Entities.Audio.Audio,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.SearchLyricsAsync(MediaBrowser.Model.Lyrics.LyricSearchRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.DownloadLyricsAsync(MediaBrowser.Controller.Entities.Audio.Audio,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.DownloadLyricsAsync(MediaBrowser.Controller.Entities.Audio.Audio,MediaBrowser.Model.Configuration.LibraryOptions,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.SaveLyricAsync(MediaBrowser.Controller.Entities.Audio.Audio,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.SaveLyricAsync(MediaBrowser.Controller.Entities.Audio.Audio,System.String,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.GetRemoteLyricsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.DeleteLyricsAsync(MediaBrowser.Controller.Entities.Audio.Audio)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.GetSupportedProviders(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricManager.GetLyricsAsync(MediaBrowser.Controller.Entities.Audio.Audio,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Lyric.LyricScheduledTask">
            <summary>
            Task to download lyrics.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricScheduledTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Lyrics.ILyricManager,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Lyric.LyricScheduledTask},MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Lyric.LyricScheduledTask"/> class.
            </summary>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="lyricManager">Instance of the <see cref="T:MediaBrowser.Controller.Lyrics.ILyricManager"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="localizationManager">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Lyric.LyricScheduledTask.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Lyric.LyricScheduledTask.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Lyric.LyricScheduledTask.Description">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Lyric.LyricScheduledTask.Category">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricScheduledTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.LyricScheduledTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Lyric.TxtLyricParser">
            <summary>
            TXT Lyric Parser.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Lyric.TxtLyricParser.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Lyric.TxtLyricParser.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:MediaBrowser.Providers.Lyric.TxtLyricParser.ParseLyrics(MediaBrowser.Model.Lyrics.LyricFile)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Manager.ImageSaver">
            <summary>
            Class ImageSaver.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ImageSaver._config">
            <summary>
            The _config.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ImageSaver._libraryMonitor">
            <summary>
            The _directory watchers.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Library.ILibraryMonitor,MediaBrowser.Model.IO.IFileSystem,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Manager.ImageSaver" /> class.
            </summary>
            <param name="config">The config.</param>
            <param name="libraryMonitor">The directory watchers.</param>
            <param name="fileSystem">The file system.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.SaveImage(MediaBrowser.Controller.Entities.BaseItem,System.IO.Stream,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Saves the image.
            </summary>
            <param name="item">The item.</param>
            <param name="source">The source.</param>
            <param name="mimeType">Type of the MIME.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">mimeType.</exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.SaveImageToLocation(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves the image to location.
            </summary>
            <param name="source">The source.</param>
            <param name="path">The path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetSavePaths(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Gets the save paths.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="mimeType">Type of the MIME.</param>
            <param name="saveLocally">if set to <c>true</c> [save locally].</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetCurrentImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Gets the current image path.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">
            imageIndex
            or
            imageIndex.
            </exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.SetImagePath(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.String)">
            <summary>
            Sets the image path.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException">imageIndex
            or
            imageIndex.
            </exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetStandardSavePath(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Gets the save path.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="mimeType">Type of the MIME.</param>
            <param name="saveLocally">if set to <c>true</c> [save locally].</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">
            imageIndex
            or
            imageIndex.
            </exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetCompatibleSavePaths(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the compatible save paths.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="mimeType">Type of the MIME.</param>
            <returns>IEnumerable{System.String}.</returns>
            <exception cref="T:System.ArgumentNullException">imageIndex.</exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetSavePathForItemInMixedFolder(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.String,System.String)">
            <summary>
            Gets the save path for item in mixed folder.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageFilename">The image filename.</param>
            <param name="extension">The extension.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.Manager.ItemImageProvider">
            <summary>
            Utilities for managing images attached to items.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ItemImageProvider._singularImages">
            <summary>
            Image types that are only one per item.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.#ctor(Microsoft.Extensions.Logging.ILogger,MediaBrowser.Controller.Providers.IProviderManager,MediaBrowser.Model.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Manager.ItemImageProvider"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="providerManager">The provider manager for interacting with provider image references.</param>
            <param name="fileSystem">The filesystem.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.RemoveImages(MediaBrowser.Controller.Entities.BaseItem,System.Boolean)">
            <summary>
            Removes all existing images from the provided item.
            </summary>
            <param name="item">The <see cref="T:MediaBrowser.Controller.Entities.BaseItem"/> to remove images from.</param>
            <param name="canDeleteLocal">Whether removing images outside metadata folder is allowed.</param>
            <returns><c>true</c> if changes were made to the item; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.ValidateImages(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IImageProvider},MediaBrowser.Controller.Providers.ImageRefreshOptions)">
            <summary>
            Verifies existing images have valid paths and adds any new local images provided.
            </summary>
            <param name="item">The <see cref="T:MediaBrowser.Controller.Entities.BaseItem"/> to validate images for.</param>
            <param name="providers">The providers to use, must include <see cref="T:MediaBrowser.Controller.Providers.ILocalImageProvider"/>(s) for local scanning.</param>
            <param name="refreshOptions">The refresh options.</param>
            <returns><c>true</c> if changes were made to the item; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.RefreshImages(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IImageProvider},MediaBrowser.Controller.Providers.ImageRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Refreshes from the providers according to the given options.
            </summary>
            <param name="item">The <see cref="T:MediaBrowser.Controller.Entities.BaseItem"/> to gather images for.</param>
            <param name="libraryOptions">The library options.</param>
            <param name="providers">The providers to query for images.</param>
            <param name="refreshOptions">The refresh options.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The refresh result.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.RefreshFromProvider(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.IDynamicImageProvider,MediaBrowser.Controller.Providers.ImageRefreshOptions,MediaBrowser.Model.Configuration.TypeOptions,System.Collections.Generic.List{MediaBrowser.Model.Entities.ImageType},MediaBrowser.Providers.Manager.RefreshResult,System.Threading.CancellationToken)">
            <summary>
            Refreshes from a dynamic provider.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.RefreshFromProvider(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.IRemoteImageProvider,MediaBrowser.Controller.Providers.ImageRefreshOptions,MediaBrowser.Model.Configuration.TypeOptions,System.Int32,System.Collections.Generic.List{MediaBrowser.Model.Entities.ImageType},MediaBrowser.Providers.Manager.RefreshResult,System.Threading.CancellationToken)">
            <summary>
            Refreshes from a remote provider.
            </summary>
            <param name="item">The item.</param>
            <param name="provider">The provider.</param>
            <param name="refreshOptions">The refresh options.</param>
            <param name="savedOptions">The saved options.</param>
            <param name="backdropLimit">The backdrop limit.</param>
            <param name="downloadedImages">The downloaded images.</param>
            <param name="result">The result.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.ContainsImages(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.List{MediaBrowser.Model.Entities.ImageType},MediaBrowser.Model.Configuration.TypeOptions,System.Int32)">
            <summary>
            Determines if an item already contains the given images.
            </summary>
            <param name="item">The item.</param>
            <param name="images">The images.</param>
            <param name="savedOptions">The saved options.</param>
            <param name="backdropLimit">The backdrop limit.</param>
            <returns><c>true</c> if the specified item contains images; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.UpdateReplaceImages(MediaBrowser.Controller.Providers.ImageRefreshOptions,System.Collections.Generic.ICollection{MediaBrowser.Model.Entities.ImageType})">
            <summary>
            Merges a list of images into the provided item, validating existing images and replacing them or adding new images as necessary.
            </summary>
            <param name="refreshOptions">The refresh options.</param>
            <param name="dontReplaceImages">List of imageTypes to remove from ReplaceImages.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.MergeImages(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.IReadOnlyList{MediaBrowser.Controller.Providers.LocalImageInfo},MediaBrowser.Controller.Providers.ImageRefreshOptions)">
            <summary>
            Merges a list of images into the provided item, validating existing images and replacing them or adding new images as necessary.
            </summary>
            <param name="item">The <see cref="T:MediaBrowser.Controller.Entities.BaseItem"/> to modify.</param>
            <param name="images">The new images to place in <c>item</c>.</param>
            <param name="refreshOptions">The refresh options.</param>
            <returns><c>true</c> if changes were made to the item; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.MetadataService`2.BeforeSave(`0,System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <summary>
            Before the save.
            </summary>
            <param name="item">The item.</param>
            <param name="isFullRefresh">if set to <c>true</c> [is full refresh].</param>
            <param name="currentUpdateType">Type of the current update.</param>
            <returns>ItemUpdateType.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.MetadataService`2.GetProviders(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Boolean,System.Boolean)">
            <summary>
            Gets the providers.
            </summary>
            <param name="item">A media item.</param>
            <param name="libraryOptions">The LibraryOptions to use.</param>
            <param name="options">The MetadataRefreshOptions to use.</param>
            <param name="isFirstRefresh">Specifies first refresh mode.</param>
            <param name="requiresRefresh">Specifies refresh mode.</param>
            <returns>IEnumerable{`0}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.MetadataService`2.MergeData(MediaBrowser.Controller.Providers.MetadataResult{`0},MediaBrowser.Controller.Providers.MetadataResult{`0},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <summary>
            Merges metadata from source into target.
            </summary>
            <param name="source">The source for new metadata.</param>
            <param name="target">The target to insert new metadata into.</param>
            <param name="lockedFields">The fields that are locked and should not be updated.</param>
            <param name="replaceData"><c>true</c> if existing data should be replaced.</param>
            <param name="mergeMetadataSettings"><c>true</c> if the metadata settings in target should be updated to match source.</param>
            <exception cref="T:System.ArgumentException">Thrown if source or target are null.</exception>
        </member>
        <member name="T:MediaBrowser.Providers.Manager.ProviderManager">
            <summary>
            Class ProviderManager.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Controller.Subtitles.ISubtitleManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Library.ILibraryMonitor,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Manager.ProviderManager},MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.IServerApplicationPaths,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.BaseItemManager.IBaseItemManager,MediaBrowser.Controller.Lyrics.ILyricManager,Microsoft.Extensions.Caching.Memory.IMemoryCache,MediaBrowser.Controller.IMediaSegmentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Manager.ProviderManager"/> class.
            </summary>
            <param name="httpClientFactory">The Http client factory.</param>
            <param name="subtitleManager">The subtitle manager.</param>
            <param name="configurationManager">The configuration manager.</param>
            <param name="libraryMonitor">The library monitor.</param>
            <param name="logger">The logger.</param>
            <param name="fileSystem">The filesystem.</param>
            <param name="appPaths">The server application paths.</param>
            <param name="libraryManager">The library manager.</param>
            <param name="baseItemManager">The BaseItem manager.</param>
            <param name="lyricManager">The lyric manager.</param>
            <param name="memoryCache">The memory cache.</param>
            <param name="mediaSegmentManager">The media segment manager.</param>
        </member>
        <member name="E:MediaBrowser.Providers.Manager.ProviderManager.RefreshStarted">
            <inheritdoc/>
        </member>
        <member name="E:MediaBrowser.Providers.Manager.ProviderManager.RefreshCompleted">
            <inheritdoc/>
        </member>
        <member name="E:MediaBrowser.Providers.Manager.ProviderManager.RefreshProgress">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IImageProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IMetadataService},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IMetadataProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IMetadataSaver},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IExternalId},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IExternalUrlProvider})">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.RefreshSingleItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,System.IO.Stream,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveImage(MediaBrowser.Controller.Entities.BaseItem,System.String,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveImage(System.IO.Stream,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetAvailableRemoteImages(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Providers.RemoteImageQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetImages(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.IRemoteImageProvider,System.String,System.Boolean,System.Threading.CancellationToken,System.Nullable{MediaBrowser.Model.Entities.ImageType})">
            <summary>
            Gets the images.
            </summary>
            <param name="item">The item.</param>
            <param name="provider">The provider.</param>
            <param name="preferredLanguage">The preferred language.</param>
            <param name="includeAllLanguages">Whether to include all languages in results.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="type">The type.</param>
            <returns>Task{IEnumerable{RemoteImageInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetRemoteImageProviderInfo(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetImageProviders(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.ImageRefreshOptions)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetMetadataProviders``1(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetMetadataSavers(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetAllMetadataPlugins">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetMetadataOptions(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveMetadataAsync(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveMetadataAsync(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveMetadataAsync(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IMetadataSaver})">
            <summary>
            Saves the metadata.
            </summary>
            <param name="item">The item.</param>
            <param name="updateType">Type of the update.</param>
            <param name="savers">The savers.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.IsSaverEnabledForItem(MediaBrowser.Controller.Library.IMetadataSaver,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Library.ItemUpdateType,System.Boolean)">
            <summary>
            Determines whether [is saver enabled for item] [the specified saver].
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetRemoteSearchResults``2(MediaBrowser.Controller.Providers.RemoteSearchQuery{``1},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetExternalUrls(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetExternalIdInfos(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetRefreshQueue">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.OnRefreshStart(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.OnRefreshComplete(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetRefreshProgress(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.OnRefreshProgress(MediaBrowser.Controller.Entities.BaseItem,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.QueueRefresh(System.Guid,MediaBrowser.Controller.Providers.MetadataRefreshOptions,MediaBrowser.Controller.Providers.RefreshPriority)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.RefreshFullItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and optionally managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.AudioFileProber">
            <summary>
            Probes audio files for metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioFileProber.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.MediaInfo.AudioFileProber},MediaBrowser.Controller.Library.IMediaSourceManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Controller.Persistence.IItemRepository,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Providers.MediaInfo.LyricResolver,MediaBrowser.Controller.Lyrics.ILyricManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.AudioFileProber"/> class.
            </summary>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface.</param>
            <param name="mediaSourceManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.IMediaSourceManager"/> interface.</param>
            <param name="mediaEncoder">Instance of the <see cref="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder"/> interface.</param>
            <param name="itemRepo">Instance of the <see cref="T:MediaBrowser.Controller.Persistence.IItemRepository"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="lyricResolver">Instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.LyricResolver"/> interface.</param>
            <param name="lyricManager">Instance of the <see cref="T:MediaBrowser.Controller.Lyrics.ILyricManager"/> interface.</param>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioFileProber.Probe``1(``0,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Probes the specified item for metadata.
            </summary>
            <param name="item">The item to probe.</param>
            <param name="options">The <see cref="T:MediaBrowser.Controller.Providers.MetadataRefreshOptions"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <typeparam name="T">The type of item to resolve.</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> probing the item for metadata.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioFileProber.FetchAsync(MediaBrowser.Controller.Entities.Audio.Audio,MediaBrowser.Model.MediaInfo.MediaInfo,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Fetches the specified audio.
            </summary>
            <param name="audio">The <see cref="T:MediaBrowser.Controller.Entities.Audio.Audio"/>.</param>
            <param name="mediaInfo">The <see cref="T:MediaBrowser.Model.MediaInfo.MediaInfo"/>.</param>
            <param name="options">The <see cref="T:MediaBrowser.Controller.Providers.MetadataRefreshOptions"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioFileProber.FetchDataFromTags(MediaBrowser.Controller.Entities.Audio.Audio,MediaBrowser.Model.MediaInfo.MediaInfo,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Boolean)">
            <summary>
            Fetches data from the tags.
            </summary>
            <param name="audio">The <see cref="T:MediaBrowser.Controller.Entities.Audio.Audio"/>.</param>
            <param name="mediaInfo">The <see cref="T:MediaBrowser.Model.MediaInfo.MediaInfo"/>.</param>
            <param name="options">The <see cref="T:MediaBrowser.Controller.Providers.MetadataRefreshOptions"/>.</param>
            <param name="tryExtractEmbeddedLyrics">Whether to extract embedded lyrics to lrc file. </param>
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.AudioImageProvider">
            <summary>
            Uses <see cref="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder"/> to extract embedded images.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioImageProvider.#ctor(MediaBrowser.Controller.Library.IMediaSourceManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Model.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.AudioImageProvider"/> class.
            </summary>
            <param name="mediaSourceManager">The media source manager for fetching item streams.</param>
            <param name="mediaEncoder">The media encoder for extracting embedded images.</param>
            <param name="config">The server configuration manager for getting image paths.</param>
            <param name="fileSystem">The filesystem.</param>
        </member>
        <member name="P:MediaBrowser.Providers.MediaInfo.AudioImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioImageProvider.GetImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.AudioResolver">
            <summary>
            Resolves external audio files for <see cref="T:MediaBrowser.Controller.Entities.Video"/>.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.AudioResolver.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.MediaInfo.AudioResolver},MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Model.IO.IFileSystem,Emby.Naming.Common.NamingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.AudioResolver"/> class for external audio file processing.
            </summary>
            <param name="logger">The logger.</param>
            <param name="localizationManager">The localization manager.</param>
            <param name="mediaEncoder">The media encoder.</param>
            <param name="fileSystem">The file system.</param>
            <param name="namingOptions">The <see cref="T:Emby.Naming.Common.NamingOptions"/> object containing FileExtensions, MediaDefaultFlags, MediaForcedFlags and MediaFlagDelimiters.</param>
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider">
            <summary>
            Uses <see cref="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder"/> to extract embedded images.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider.#ctor(MediaBrowser.Controller.Library.IMediaSourceManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider"/> class.
            </summary>
            <param name="mediaSourceManager">The media source manager for fetching item streams and attachments.</param>
            <param name="mediaEncoder">The media encoder for extracting attached/embedded images.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider.GetImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.EmbeddedImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeVideoInfo.GetBDInfo(System.String)">
            <summary>
            Gets information about the longest playlist on a bdrom.
            </summary>
            <param name="path">The path.</param>
            <returns>VideoStream.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeVideoInfo.AddExternalSubtitlesAsync(MediaBrowser.Controller.Entities.Video,System.Collections.Generic.List{MediaBrowser.Model.Entities.MediaStream},MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Adds the external subtitles.
            </summary>
            <param name="video">The video.</param>
            <param name="currentStreams">The current streams.</param>
            <param name="options">The refreshOptions.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeVideoInfo.AddExternalAudioAsync(MediaBrowser.Controller.Entities.Video,System.Collections.Generic.List{MediaBrowser.Model.Entities.MediaStream},MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Adds the external audio.
            </summary>
            <param name="video">The video.</param>
            <param name="currentStreams">The current streams.</param>
            <param name="options">The refreshOptions.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeVideoInfo.CreateDummyChapters(MediaBrowser.Controller.Entities.Video)">
            <summary>
            Creates dummy chapters.
            </summary>
            <param name="video">The video.</param>
            <returns>An array of dummy chapters.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.LyricResolver">
            <summary>
            Resolves external lyric files for <see cref="T:MediaBrowser.Controller.Entities.Audio.Audio"/>.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.LyricResolver.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.MediaInfo.LyricResolver},MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Model.IO.IFileSystem,Emby.Naming.Common.NamingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.LyricResolver"/> class for external subtitle file processing.
            </summary>
            <param name="logger">The logger.</param>
            <param name="localizationManager">The localization manager.</param>
            <param name="mediaEncoder">The media encoder.</param>
            <param name="fileSystem">The file system.</param>
            <param name="namingOptions">The <see cref="T:Emby.Naming.Common.NamingOptions"/> object containing FileExtensions, MediaDefaultFlags, MediaForcedFlags and MediaFlagDelimiters.</param>
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.MediaInfoResolver">
            <summary>
            Resolves external files for <see cref="T:MediaBrowser.Controller.Entities.Video"/>.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.MediaInfo.MediaInfoResolver._externalPathParser">
            <summary>
            The <see cref="T:Emby.Naming.ExternalFiles.ExternalPathParser"/> instance.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.MediaInfo.MediaInfoResolver._mediaEncoder">
            <summary>
            The <see cref="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder"/> instance.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.MediaInfo.MediaInfoResolver._namingOptions">
            <summary>
            The <see cref="T:Emby.Naming.Common.NamingOptions"/> instance.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.MediaInfo.MediaInfoResolver._type">
            <summary>
            The <see cref="T:MediaBrowser.Model.Dlna.DlnaProfileType"/> of the files this resolver should resolve.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.MediaInfoResolver.#ctor(Microsoft.Extensions.Logging.ILogger,MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Model.IO.IFileSystem,Emby.Naming.Common.NamingOptions,MediaBrowser.Model.Dlna.DlnaProfileType)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.MediaInfoResolver"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="localizationManager">The localization manager.</param>
            <param name="mediaEncoder">The media encoder.</param>
            <param name="fileSystem">The file system.</param>
            <param name="namingOptions">The <see cref="T:Emby.Naming.Common.NamingOptions"/> object containing FileExtensions, MediaDefaultFlags, MediaForcedFlags and MediaFlagDelimiters.</param>
            <param name="type">The <see cref="T:MediaBrowser.Model.Dlna.DlnaProfileType"/> of the parsed file.</param>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.MediaInfoResolver.GetExternalStreamsAsync(MediaBrowser.Controller.Entities.Video,System.Int32,MediaBrowser.Controller.Providers.IDirectoryService,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves the external streams for the provided video.
            </summary>
            <param name="video">The <see cref="T:MediaBrowser.Controller.Entities.Video"/> object to search external streams for.</param>
            <param name="startIndex">The stream index to start adding external streams at.</param>
            <param name="directoryService">The directory service to search for files.</param>
            <param name="clearCache">True if the directory service cache should be cleared before searching.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The external streams located.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.MediaInfoResolver.GetExternalStreams(MediaBrowser.Controller.Entities.Audio.Audio,System.Int32,MediaBrowser.Controller.Providers.IDirectoryService,System.Boolean)">
            <summary>
            Retrieves the external streams for the provided audio.
            </summary>
            <param name="audio">The <see cref="T:MediaBrowser.Controller.Entities.Audio.Audio"/> object to search external streams for.</param>
            <param name="startIndex">The stream index to start adding external streams at.</param>
            <param name="directoryService">The directory service to search for files.</param>
            <param name="clearCache">True if the directory service cache should be cleared before searching.</param>
            <returns>The external streams located.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.MediaInfoResolver.GetExternalFiles(MediaBrowser.Controller.Entities.Video,MediaBrowser.Controller.Providers.IDirectoryService,System.Boolean)">
            <summary>
            Returns the external file infos for the given video.
            </summary>
            <param name="video">The <see cref="T:MediaBrowser.Controller.Entities.Video"/> object to search external files for.</param>
            <param name="directoryService">The directory service to search for files.</param>
            <param name="clearCache">True if the directory service cache should be cleared before searching.</param>
            <returns>The external file paths located.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.MediaInfoResolver.GetExternalFiles(MediaBrowser.Controller.Entities.Audio.Audio,MediaBrowser.Controller.Providers.IDirectoryService,System.Boolean)">
            <summary>
            Returns the external file infos for the given audio.
            </summary>
            <param name="audio">The <see cref="T:MediaBrowser.Controller.Entities.Audio.Audio"/> object to search external files for.</param>
            <param name="directoryService">The directory service to search for files.</param>
            <param name="clearCache">True if the directory service cache should be cleared before searching.</param>
            <returns>The external file paths located.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.MediaInfoResolver.GetMediaInfo(System.String,MediaBrowser.Model.Dlna.DlnaProfileType,System.Threading.CancellationToken)">
            <summary>
            Returns the media info of the given file.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="type">The <see cref="T:MediaBrowser.Model.Dlna.DlnaProfileType"/>.</param>
            <param name="cancellationToken">The cancellation token to cancel operation.</param>
            <returns>The media info for the given file.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.MediaInfoResolver.MergeMetadata(MediaBrowser.Model.Entities.MediaStream,Emby.Naming.ExternalFiles.ExternalPathParserResult)">
            <summary>
            Merges path metadata into stream metadata.
            </summary>
            <param name="mediaStream">The <see cref="T:MediaBrowser.Model.Entities.MediaStream"/> object.</param>
            <param name="pathInfo">The <see cref="T:Emby.Naming.ExternalFiles.ExternalPathParserResult"/> object.</param>
            <returns>The modified mediaStream.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.ProbeProvider">
            <summary>
            The probe provider.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.#ctor(MediaBrowser.Controller.Library.IMediaSourceManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Controller.Persistence.IItemRepository,MediaBrowser.Model.MediaInfo.IBlurayExaminer,MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.MediaEncoding.IEncodingManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Subtitles.ISubtitleManager,MediaBrowser.Controller.Chapters.IChapterManager,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Model.IO.IFileSystem,Microsoft.Extensions.Logging.ILoggerFactory,Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Lyrics.ILyricManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.ProbeProvider"/> class.
            </summary>
            <param name="mediaSourceManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.IMediaSourceManager"/> interface.</param>
            <param name="mediaEncoder">Instance of the <see cref="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder"/> interface.</param>
            <param name="itemRepo">Instance of the <see cref="T:MediaBrowser.Controller.Persistence.IItemRepository"/> interface.</param>
            <param name="blurayExaminer">Instance of the <see cref="T:MediaBrowser.Model.MediaInfo.IBlurayExaminer"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
            <param name="encodingManager">Instance of the <see cref="T:MediaBrowser.Controller.MediaEncoding.IEncodingManager"/> interface.</param>
            <param name="config">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
            <param name="subtitleManager">Instance of the <see cref="T:MediaBrowser.Controller.Subtitles.ISubtitleManager"/> interface.</param>
            <param name="chapterManager">Instance of the <see cref="T:MediaBrowser.Controller.Chapters.IChapterManager"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="loggerFactory">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="namingOptions">The <see cref="T:Emby.Naming.Common.NamingOptions"/>.</param>
            <param name="lyricManager">Instance of the <see cref="T:MediaBrowser.Controller.Lyrics.ILyricManager"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Providers.MediaInfo.ProbeProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.MediaInfo.ProbeProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.HasChanged(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.IDirectoryService)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchAsync(MediaBrowser.Controller.Entities.TV.Episode,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchAsync(MediaBrowser.Controller.Entities.MusicVideo,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchAsync(MediaBrowser.Controller.Entities.Movies.Movie,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchAsync(MediaBrowser.Controller.Entities.Trailer,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchAsync(MediaBrowser.Controller.Entities.Video,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchAsync(MediaBrowser.Controller.Entities.Audio.Audio,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchAsync(MediaBrowser.Controller.Entities.AudioBook,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchVideoInfo``1(``0,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Fetches video information for an item.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The <see cref="T:MediaBrowser.Controller.Providers.MetadataRefreshOptions"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <typeparam name="T">The type of item to resolve.</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> fetching the <see cref="T:MediaBrowser.Controller.Library.ItemUpdateType"/> for an item.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.ProbeProvider.FetchAudioInfo``1(``0,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Fetches audio information for an item.
            </summary>
            <param name="item">The item.</param>
            <param name="options">The <see cref="T:MediaBrowser.Controller.Providers.MetadataRefreshOptions"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <typeparam name="T">The type of item to resolve.</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> fetching the <see cref="T:MediaBrowser.Controller.Library.ItemUpdateType"/> for an item.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.SubtitleResolver">
            <summary>
            Resolves external subtitle files for <see cref="T:MediaBrowser.Controller.Entities.Video"/>.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.SubtitleResolver.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.MediaInfo.SubtitleResolver},MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Model.IO.IFileSystem,Emby.Naming.Common.NamingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.SubtitleResolver"/> class for external subtitle file processing.
            </summary>
            <param name="logger">The logger.</param>
            <param name="localizationManager">The localization manager.</param>
            <param name="mediaEncoder">The media encoder.</param>
            <param name="fileSystem">The file system.</param>
            <param name="namingOptions">The <see cref="T:Emby.Naming.Common.NamingOptions"/> object containing FileExtensions, MediaDefaultFlags, MediaForcedFlags and MediaFlagDelimiters.</param>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.SubtitleScheduledTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.SubtitleScheduledTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.VideoImageProvider">
            <summary>
            Uses <see cref="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder"/> to create still images from the main video.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.VideoImageProvider.#ctor(MediaBrowser.Controller.Library.IMediaSourceManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.MediaInfo.VideoImageProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.MediaInfo.VideoImageProvider"/> class.
            </summary>
            <param name="mediaSourceManager">The media source manager for fetching item streams.</param>
            <param name="mediaEncoder">The media encoder for capturing images.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:MediaBrowser.Providers.MediaInfo.VideoImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.MediaInfo.VideoImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.VideoImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.VideoImageProvider.GetImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.VideoImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.ImdbExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbPersonExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbPersonExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbPersonExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbPersonExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.ImdbPersonExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.MovieMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Movies.Movie},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Movies.Movie},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.TrailerMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Trailer},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Trailer},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Music.AlbumMetadataService">
            <summary>
            The album metadata service.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Music.AlbumMetadataService.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Music.AlbumMetadataService},MediaBrowser.Controller.Providers.IProviderManager,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Music.AlbumMetadataService"/> class.
            </summary>
            <param name="serverConfigurationManager">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/>.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface.</param>
            <param name="providerManager">Instance of the <see cref="T:MediaBrowser.Controller.Providers.IProviderManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Music.AlbumMetadataService.EnableUpdatingPremiereDateFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.AlbumMetadataService.EnableUpdatingGenresFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.AlbumMetadataService.EnableUpdatingStudiosFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.AlbumMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Entities.Audio.MusicAlbum)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.AlbumMetadataService.UpdateMetadataFromChildren(MediaBrowser.Controller.Entities.Audio.MusicAlbum,System.Collections.Generic.IList{MediaBrowser.Controller.Entities.BaseItem},System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.AlbumMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.MusicAlbum},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.MusicAlbum},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ArtistMetadataService.EnableUpdatingGenresFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.ArtistMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Entities.Audio.MusicArtist)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Music.AudioMetadataService">
            <summary>
            The audio metadata service.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Music.AudioMetadataService.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Music.AudioMetadataService},MediaBrowser.Controller.Providers.IProviderManager,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Music.AudioMetadataService"/> class.
            </summary>
            <param name="serverConfigurationManager">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/>.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface.</param>
            <param name="providerManager">Instance of the <see cref="T:MediaBrowser.Controller.Providers.IProviderManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Music.AudioMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.Audio},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.Audio},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ImvdbId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ImvdbId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ImvdbId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ImvdbId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.ImvdbId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicVideoMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.MusicVideo},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.MusicVideo},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Playlists.PlaylistItemsProvider">
            <summary>
            Local playlist provider.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Playlists.PlaylistItemsProvider.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Playlists.PlaylistItemsProvider},MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Model.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Playlists.PlaylistItemsProvider"/> class.
            </summary>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Playlists.PlaylistItemsProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Playlists.PlaylistItemsProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Playlists.PlaylistItemsProvider.GetMetadata(MediaBrowser.Controller.Providers.ItemInfo,MediaBrowser.Controller.Providers.IDirectoryService,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Playlists.PlaylistItemsProvider.HasChanged(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.IDirectoryService)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Playlists.PlaylistMetadataService.EnableUpdatingGenresFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Playlists.PlaylistMetadataService.EnableUpdatingOfficialRatingFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Playlists.PlaylistMetadataService.EnableUpdatingStudiosFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Playlists.PlaylistMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Playlists.Playlist)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Playlists.PlaylistMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Playlists.Playlist},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Playlists.Playlist},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.GetSearchResults(MediaBrowser.Controller.Providers.AlbumInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.GetMetadata(MediaBrowser.Controller.Providers.AlbumInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetSearchResults(MediaBrowser.Controller.Providers.ArtistInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetMetadata(MediaBrowser.Controller.Providers.ArtistInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetArtistDataPath(MediaBrowser.Common.Configuration.IApplicationPaths,System.String)">
            <summary>
            Gets the artist data path.
            </summary>
            <param name="appPaths">The application paths.</param>
            <param name="musicBrainzArtistId">The music brainz artist identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetArtistDataPath(MediaBrowser.Common.Configuration.IApplicationPaths)">
            <summary>
            Gets the artist data path.
            </summary>
            <param name="appPaths">The application paths.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.Configuration.PluginConfiguration">
            <summary>
            MusicBrainz plugin configuration.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Plugins.MusicBrainz.Configuration.PluginConfiguration.DefaultServer">
            <summary>
            The default server URL.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Plugins.MusicBrainz.Configuration.PluginConfiguration.DefaultRateLimit">
            <summary>
            The default rate limit.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.Configuration.PluginConfiguration.Server">
            <summary>
            Gets or sets the server URL.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.Configuration.PluginConfiguration.RateLimit">
            <summary>
            Gets or sets the rate limit.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.Configuration.PluginConfiguration.ReplaceArtistName">
            <summary>
            Gets or sets a value indicating whether to replace the artist name.
            </summary>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumArtistExternalId">
            <summary>
            MusicBrainz album artist external id.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumArtistExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumArtistExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumExternalId">
            <summary>
            MusicBrainz album external id.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider">
            <summary>
            Music album metadata provider for MusicBrainz.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider.GetSearchResults(MediaBrowser.Controller.Providers.AlbumInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider.GetMetadata(MediaBrowser.Controller.Providers.AlbumInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzAlbumProvider.Dispose(System.Boolean)">
            <summary>
            Dispose all resources.
            </summary>
            <param name="disposing">Whether to dispose.</param>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistExternalId">
            <summary>
            MusicBrainz artist external id.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider">
            <summary>
            MusicBrainz artist provider.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider.GetSearchResults(MediaBrowser.Controller.Providers.ArtistInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider.GetMetadata(MediaBrowser.Controller.Providers.ArtistInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzArtistProvider.Dispose(System.Boolean)">
            <summary>
            Dispose all resources.
            </summary>
            <param name="disposing">Whether to dispose.</param>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzOtherArtistExternalId">
            <summary>
            MusicBrainz other artist external id.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzOtherArtistExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzOtherArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzOtherArtistExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzOtherArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzOtherArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzReleaseGroupExternalId">
            <summary>
            MusicBrainz release group external id.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzReleaseGroupExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzReleaseGroupExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzReleaseGroupExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzReleaseGroupExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzReleaseGroupExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzTrackId">
            <summary>
            MusicBrainz track id.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzTrackId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzTrackId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzTrackId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzTrackId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.MusicBrainzTrackId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin">
            <summary>
            Plugin instance.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Model.Serialization.IXmlSerializer,MediaBrowser.Common.IApplicationHost)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin"/> class.
            </summary>
            <param name="applicationPaths">Instance of the <see cref="T:MediaBrowser.Common.Configuration.IApplicationPaths"/> interface.</param>
            <param name="xmlSerializer">Instance of the <see cref="T:MediaBrowser.Model.Serialization.IXmlSerializer"/> interface.</param>
            <param name="applicationHost">Instance of the <see cref="T:MediaBrowser.Common.IApplicationHost"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin.Instance">
            <summary>
            Gets the current plugin instance.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin.Id">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin.Description">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin.ConfigurationFileName">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.MusicBrainz.Plugin.GetPages">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Omdb.JsonOmdbNotAvailableInt32Converter">
            <summary>
            Converts a string <c>N/A</c> to <c>string.Empty</c>.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.JsonOmdbNotAvailableInt32Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.JsonOmdbNotAvailableInt32Converter.Write(System.Text.Json.Utf8JsonWriter,System.Nullable{System.Int32},System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Omdb.JsonOmdbNotAvailableStringConverter">
            <summary>
            Converts a string <c>N/A</c> to <c>string.Empty</c>.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.JsonOmdbNotAvailableStringConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.JsonOmdbNotAvailableStringConverter.Write(System.Text.Json.Utf8JsonWriter,System.String,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Omdb.OmdbItemProvider.SearchResultList.Search">
            <summary>
            Gets or sets the results.
            </summary>
            <value>The results.</value>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider">
            <summary>Provider for OMDB service.</summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Configuration.IServerConfigurationManager)">
            <summary>Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider"/> class.</summary>
            <param name="httpClientFactory">HttpClientFactory to use for calls to OMDB service.</param>
            <param name="fileSystem">IFileSystem to use for store OMDB data.</param>
            <param name="configurationManager">IServerConfigurationManager to use.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider.Fetch``1(MediaBrowser.Controller.Providers.MetadataResult{``0},System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Fetches data from OMDB service.</summary>
            <param name="itemResult">Metadata about media item.</param>
            <param name="imdbId">IMDB ID for media.</param>
            <param name="language">Media language.</param>
            <param name="country">Country of origin.</param>
            <param name="cancellationToken">CancellationToken to use for operation.</param>
            <typeparam name="T">The first generic type parameter.</typeparam>
            <returns>Returns a Task object that can be awaited.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider.FetchEpisodeData``1(MediaBrowser.Controller.Providers.MetadataResult{``0},System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Gets data about an episode.</summary>
            <param name="itemResult">Metadata about episode.</param>
            <param name="episodeNumber">Episode number.</param>
            <param name="seasonNumber">Season number.</param>
            <param name="episodeImdbId">Episode ID.</param>
            <param name="seriesImdbId">Season ID.</param>
            <param name="language">Episode language.</param>
            <param name="country">Country of origin.</param>
            <param name="cancellationToken">CancellationToken to use for operation.</param>
            <typeparam name="T">The first generic type parameter.</typeparam>
            <returns>Whether operation was successful.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider.GetOmdbUrl(System.String)">
            <summary>Gets OMDB URL.</summary>
            <param name="query">Appends query string to URL.</param>
            <returns>OMDB URL with optional query string.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider.TryParseYear(System.String,System.Nullable{System.Int32}@)">
            <summary>
            Extract the year from a string.
            </summary>
            <param name="input">The input string.</param>
            <param name="year">The year.</param>
            <returns>A value indicating whether the input could successfully be parsed as a year.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider.OmdbRating">
            <summary>Describes OMDB rating.</summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider.OmdbRating.Source">
            <summary>Gets or sets rating source.</summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Omdb.OmdbProvider.OmdbRating.Value">
            <summary>Gets or sets rating value.</summary>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.StudioImages.Configuration.PluginConfiguration">
            <summary>
            Plugin configuration class for the studio image provider.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.StudioImages.Configuration.PluginConfiguration.RepositoryUrl">
            <summary>
            Gets or sets the studio image repository URL.
            </summary>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.StudioImages.Plugin">
            <summary>
            Artwork Plugin class.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Plugins.StudioImages.Plugin.DefaultServer">
            <summary>
            Artwork repository URL.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.Plugin.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Model.Serialization.IXmlSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.StudioImages.Plugin"/> class.
            </summary>
            <param name="applicationPaths">application paths.</param>
            <param name="xmlSerializer">xml serializer.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.StudioImages.Plugin.Instance">
            <summary>
            Gets the instance of Artwork plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.StudioImages.Plugin.Id">
            <inheritdoc/>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.StudioImages.Plugin.Name">
            <inheritdoc/>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.StudioImages.Plugin.Description">
            <inheritdoc/>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.StudioImages.Plugin.ConfigurationFileName">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.Plugin.GetPages">
            <inheritdoc/>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider">
            <summary>
            Studio image provider.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,System.Net.Http.IHttpClientFactory,MediaBrowser.Model.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider"/> class.
            </summary>
            <param name="config">The <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/>.</param>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="fileSystem">The <see cref="T:MediaBrowser.Model.IO.IFileSystem"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.EnsureList(System.String,System.String,MediaBrowser.Model.IO.IFileSystem,System.Threading.CancellationToken)">
            <summary>
            Ensures the existence of a file listing.
            </summary>
            <param name="url">The URL.</param>
            <param name="file">The file.</param>
            <param name="fileSystem">The file system.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A Task to ensure existence of a file listing.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.FindMatch(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get matching image for an item.
            </summary>
            <param name="item">The <see cref="T:MediaBrowser.Controller.Entities.BaseItem"/>.</param>
            <param name="images">The enumerable of image strings.</param>
            <returns>The matching image string.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.StudioImages.StudiosImageProvider.GetAvailableImages(System.String)">
            <summary>
            Get available image strings for a file.
            </summary>
            <param name="file">The file.</param>
            <returns>All images strings of a file.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.Api.TmdbController">
            <summary>
            The TMDb API controller.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Api.TmdbController.#ctor(MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.Api.TmdbController"/> class.
            </summary>
            <param name="tmdbClientManager">The TMDb client manager.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Api.TmdbController.TmdbClientConfiguration">
            <summary>
            Gets the TMDb image configuration options.
            </summary>
            <returns>The image portion of the TMDb client configuration.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetExternalId">
            <summary>
            External id for a TMDb box set.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider">
            <summary>
            BoxSet image provider powered by TMDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetProvider">
            <summary>
            BoxSet provider powered by TMDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetProvider"/> class.
            </summary>
            <param name="libraryManager">The <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/>.</param>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetProvider.GetSearchResults(MediaBrowser.Controller.Providers.BoxSetInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetProvider.GetMetadata(MediaBrowser.Controller.Providers.BoxSetInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.BoxSets.TmdbBoxSetProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration">
            <summary>
            Plugin configuration class for TMDb library.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.TmdbApiKey">
            <summary>
            Gets or sets a value to use as the API key for accessing TMDb. This is intentionally excluded from the
            settings page as the API key should not need to be changed by most users.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.IncludeAdult">
            <summary>
            Gets or sets a value indicating whether include adult content when searching with TMDb.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.ExcludeTagsSeries">
            <summary>
            Gets or sets a value indicating whether tags should be imported for series from TMDb.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.ExcludeTagsMovies">
            <summary>
            Gets or sets a value indicating whether tags should be imported for movies from TMDb.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.ImportSeasonName">
            <summary>
            Gets or sets a value indicating whether season name should be imported from TMDb.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.MaxCastMembers">
            <summary>
            Gets or sets a value indicating the maximum number of cast members to fetch for an item.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.PosterSize">
            <summary>
            Gets or sets a value indicating the poster image size to fetch.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.BackdropSize">
            <summary>
            Gets or sets a value indicating the backdrop image size to fetch.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.LogoSize">
            <summary>
            Gets or sets a value indicating the logo image size to fetch.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.ProfileSize">
            <summary>
            Gets or sets a value indicating the profile image size to fetch.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.PluginConfiguration.StillSize">
            <summary>
            Gets or sets a value indicating the still image size to fetch.
            </summary>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieExternalId">
            <summary>
            External id for a TMDb movie.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider">
            <summary>
            Movie image provider powered by TMDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieProvider">
            <summary>
            Movie provider powered by TMDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieProvider.#ctor(MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager,System.Net.Http.IHttpClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieProvider"/> class.
            </summary>
            <param name="libraryManager">The <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/>.</param>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieProvider.Order">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieProvider.GetSearchResults(MediaBrowser.Controller.Providers.MovieInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieProvider.GetMetadata(MediaBrowser.Controller.Providers.MovieInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Movies.TmdbMovieProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonExternalId">
            <summary>
            External id for a TMDb person.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider">
            <summary>
            Person image provider powered by TMDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonProvider">
            <summary>
            Person image provider powered by TMDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonProvider.GetSearchResults(MediaBrowser.Controller.Providers.PersonLookupInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonProvider.GetMetadata(MediaBrowser.Controller.Providers.PersonLookupInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.People.TmdbPersonProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.Plugin">
            <summary>
            Plugin class for the TMDb library.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Plugin.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Model.Serialization.IXmlSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.Plugin"/> class.
            </summary>
            <param name="applicationPaths">application paths.</param>
            <param name="xmlSerializer">xml serializer.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Plugin.Instance">
            <summary>
            Gets the instance of TMDb plugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Plugin.Id">
            <inheritdoc/>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Plugin.Name">
            <inheritdoc/>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Plugin.Description">
            <inheritdoc/>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.Plugin.ConfigurationFileName">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.Plugin.GetPages">
            <summary>
            Return the plugin configuration page.
            </summary>
            <returns>PluginPageInfo.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager">
            <summary>
            Manager class for abstracting the TMDb API client library.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/> class.
            </summary>
            <param name="memoryCache">An instance of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetMovieAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a movie from the TMDb API based on its TMDb id.
            </summary>
            <param name="tmdbId">The movie's TMDb id.</param>
            <param name="language">The movie's language.</param>
            <param name="imageLanguages">A comma-separated list of image languages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb movie or null if not found.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetCollectionAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a collection from the TMDb API based on its TMDb id.
            </summary>
            <param name="tmdbId">The collection's TMDb id.</param>
            <param name="language">The collection's language.</param>
            <param name="imageLanguages">A comma-separated list of image languages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb collection or null if not found.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetSeriesAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a tv show from the TMDb API based on its TMDb id.
            </summary>
            <param name="tmdbId">The tv show's TMDb id.</param>
            <param name="language">The tv show's language.</param>
            <param name="imageLanguages">A comma-separated list of image languages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb tv show information or null if not found.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetSeriesGroupAsync(System.Int32,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a tv show episode group from the TMDb API based on the show id and the display order.
            </summary>
            <param name="tvShowId">The tv show's TMDb id.</param>
            <param name="displayOrder">The display order.</param>
            <param name="language">The tv show's language.</param>
            <param name="imageLanguages">A comma-separated list of image languages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb tv show episode group information or null if not found.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetSeasonAsync(System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a tv season from the TMDb API based on the tv show's TMDb id.
            </summary>
            <param name="tvShowId">The tv season's TMDb id.</param>
            <param name="seasonNumber">The season number.</param>
            <param name="language">The tv season's language.</param>
            <param name="imageLanguages">A comma-separated list of image languages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb tv season information or null if not found.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetEpisodeAsync(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a movie from the TMDb API based on the tv show's TMDb id.
            </summary>
            <param name="tvShowId">The tv show's TMDb id.</param>
            <param name="seasonNumber">The season number.</param>
            <param name="episodeNumber">The episode number.</param>
            <param name="displayOrder">The display order.</param>
            <param name="language">The episode's language.</param>
            <param name="imageLanguages">A comma-separated list of image languages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb tv episode information or null if not found.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetPersonAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a person eg. cast or crew member from the TMDb API based on its TMDb id.
            </summary>
            <param name="personTmdbId">The person's TMDb id.</param>
            <param name="language">The episode's language.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb person information or null if not found.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.FindByExternalIdAsync(System.String,TMDbLib.Objects.Find.FindExternalSource,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an item from the TMDb API based on its id from an external service eg. IMDb id, TvDb id.
            </summary>
            <param name="externalId">The item's external id.</param>
            <param name="source">The source of the id eg. IMDb.</param>
            <param name="language">The item's language.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb item or null if not found.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.SearchSeriesAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches for a tv show using the TMDb API based on its name.
            </summary>
            <param name="name">The name of the tv show.</param>
            <param name="language">The tv show's language.</param>
            <param name="year">The year the tv show first aired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb tv show information.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.SearchPersonAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Searches for a person based on their name using the TMDb API.
            </summary>
            <param name="name">The name of the person.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb person information.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.SearchMovieAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Searches for a movie based on its name using the TMDb API.
            </summary>
            <param name="name">The name of the movie.</param>
            <param name="language">The movie's language.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb movie information.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.SearchMovieAsync(System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Searches for a movie based on its name using the TMDb API.
            </summary>
            <param name="name">The name of the movie.</param>
            <param name="year">The release year of the movie.</param>
            <param name="language">The movie's language.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb movie information.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.SearchCollectionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Searches for a collection based on its name using the TMDb API.
            </summary>
            <param name="name">The name of the collection.</param>
            <param name="language">The collection's language.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The TMDb collection information.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetUrl(System.String,System.String)">
            <summary>
            Handles bad path checking and builds the absolute url.
            </summary>
            <param name="size">The image size to fetch.</param>
            <param name="path">The relative URL of the image.</param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetPosterUrl(System.String)">
            <summary>
            Gets the absolute URL of the poster.
            </summary>
            <param name="posterPath">The relative URL of the poster.</param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetProfileUrl(System.String)">
            <summary>
            Gets the absolute URL of the profile image.
            </summary>
            <param name="actorProfilePath">The relative URL of the profile image.</param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.ConvertPostersToRemoteImageInfo(System.Collections.Generic.IReadOnlyList{TMDbLib.Objects.General.ImageData},System.String)">
            <summary>
            Converts poster <see cref="T:TMDbLib.Objects.General.ImageData"/>s into <see cref="T:MediaBrowser.Model.Providers.RemoteImageInfo"/>s.
            </summary>
            <param name="images">The input images.</param>
            <param name="requestLanguage">The requested language.</param>
            <returns>The remote images.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.ConvertBackdropsToRemoteImageInfo(System.Collections.Generic.IReadOnlyList{TMDbLib.Objects.General.ImageData},System.String)">
            <summary>
            Converts backdrop <see cref="T:TMDbLib.Objects.General.ImageData"/>s into <see cref="T:MediaBrowser.Model.Providers.RemoteImageInfo"/>s.
            </summary>
            <param name="images">The input images.</param>
            <param name="requestLanguage">The requested language.</param>
            <returns>The remote images.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.ConvertLogosToRemoteImageInfo(System.Collections.Generic.IReadOnlyList{TMDbLib.Objects.General.ImageData},System.String)">
            <summary>
            Converts logo <see cref="T:TMDbLib.Objects.General.ImageData"/>s into <see cref="T:MediaBrowser.Model.Providers.RemoteImageInfo"/>s.
            </summary>
            <param name="images">The input images.</param>
            <param name="requestLanguage">The requested language.</param>
            <returns>The remote images.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.ConvertProfilesToRemoteImageInfo(System.Collections.Generic.IReadOnlyList{TMDbLib.Objects.General.ImageData},System.String)">
            <summary>
            Converts profile <see cref="T:TMDbLib.Objects.General.ImageData"/>s into <see cref="T:MediaBrowser.Model.Providers.RemoteImageInfo"/>s.
            </summary>
            <param name="images">The input images.</param>
            <param name="requestLanguage">The requested language.</param>
            <returns>The remote images.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.ConvertStillsToRemoteImageInfo(System.Collections.Generic.IReadOnlyList{TMDbLib.Objects.General.ImageData},System.String)">
            <summary>
            Converts still <see cref="T:TMDbLib.Objects.General.ImageData"/>s into <see cref="T:MediaBrowser.Model.Providers.RemoteImageInfo"/>s.
            </summary>
            <param name="images">The input images.</param>
            <param name="requestLanguage">The requested language.</param>
            <returns>The remote images.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.ConvertToRemoteImageInfo(System.Collections.Generic.IReadOnlyList{TMDbLib.Objects.General.ImageData},System.String,MediaBrowser.Model.Entities.ImageType,System.String)">
            <summary>
            Converts <see cref="T:TMDbLib.Objects.General.ImageData"/>s into <see cref="T:MediaBrowser.Model.Providers.RemoteImageInfo"/>s.
            </summary>
            <param name="images">The input images.</param>
            <param name="size">The size of the image to fetch.</param>
            <param name="type">The type of the image.</param>
            <param name="requestLanguage">The requested language.</param>
            <returns>The remote images.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.GetClientConfiguration">
            <summary>
            Gets the <see cref="T:TMDbLib.Client.TMDbClient"/> configuration.
            </summary>
            <returns>The configuration.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils">
            <summary>
            Utilities for the TMDb provider.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.BaseTmdbUrl">
            <summary>
            URL of the TMDb instance to use.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.ProviderName">
            <summary>
            Name of the provider.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.ApiKey">
            <summary>
            API key to use when performing an API call.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.WantedCrewTypes">
            <summary>
            The crew types to keep.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.WantedCrewKinds">
            <summary>
            The crew kinds to keep.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.NonWordRegex">
            <remarks>
            Pattern:<br/>
            <code>[\\W_]+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [_\W] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.CleanName(System.String)">
            <summary>
            Cleans the name according to TMDb requirements.
            </summary>
            <param name="name">The name of the entity.</param>
            <returns>The cleaned name.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.MapCrewToPersonType(TMDbLib.Objects.General.Crew)">
            <summary>
            Maps the TMDb provided roles for crew members to Jellyfin roles.
            </summary>
            <param name="crew">Crew member to map against the Jellyfin person types.</param>
            <returns>The Jellyfin person type.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.IsTrailerType(TMDbLib.Objects.General.Video)">
            <summary>
            Determines whether a video is a trailer.
            </summary>
            <param name="video">The TMDb video.</param>
            <returns>A boolean indicating whether the video is a trailer.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.GetImageLanguagesParam(System.String)">
            <summary>
            Normalizes a language string for use with TMDb's include image language parameter.
            </summary>
            <param name="preferredLanguage">The preferred language as either a 2 letter code with or without country code.</param>
            <returns>The comma separated language string.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.NormalizeLanguage(System.String)">
            <summary>
            Normalizes a language string for use with TMDb's language parameter.
            </summary>
            <param name="language">The language code.</param>
            <returns>The normalized language code.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.AdjustImageLanguage(System.String,System.String)">
            <summary>
            Adjusts the image's language code preferring the 5 letter language code eg. en-US.
            </summary>
            <param name="imageLanguage">The image's actual language code.</param>
            <param name="requestLanguage">The requested language code.</param>
            <returns>The language code.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TmdbUtils.BuildParentalRating(System.String,System.String)">
            <summary>
            Combines the metadata country code and the parental rating from the API into the value we store in our database.
            </summary>
            <param name="countryCode">The ISO 3166-1 country code of the rating country.</param>
            <param name="ratingValue">The rating value returned by the TMDb API.</param>
            <returns>The combined parental rating of country code+rating value.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider">
            <summary>
            TV episode image provider powered by TheMovieDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeProvider">
            <summary>
            TV episode provider powered by TheMovieDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeProvider.Order">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeProvider.GetSearchResults(MediaBrowser.Controller.Providers.EpisodeInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeProvider.GetMetadata(MediaBrowser.Controller.Providers.EpisodeInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbEpisodeProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider">
            <summary>
            TV season image provider powered by TheMovieDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider.Order">
            <inheritdoc/>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider.Name">
            <inheritdoc/>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonProvider">
            <summary>
            TV season provider powered by TheMovieDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonProvider.Name">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonProvider.GetMetadata(MediaBrowser.Controller.Providers.SeasonInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonProvider.GetSearchResults(MediaBrowser.Controller.Providers.SeasonInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeasonProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesExternalId">
            <summary>
            External id for a TMDb series.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider">
            <summary>
            TV series image provider powered by TheMovieDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider.#ctor(System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider"/> class.
            </summary>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesProvider">
            <summary>
            TV series provider powered by TheMovieDb.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesProvider.#ctor(MediaBrowser.Controller.Library.ILibraryManager,System.Net.Http.IHttpClientFactory,MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesProvider"/> class.
            </summary>
            <param name="libraryManager">The <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/>.</param>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="tmdbClientManager">The <see cref="T:MediaBrowser.Providers.Plugins.Tmdb.TmdbClientManager"/>.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesProvider.GetSearchResults(MediaBrowser.Controller.Providers.SeriesInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesProvider.GetMetadata(MediaBrowser.Controller.Providers.SeriesInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.Tmdb.TV.TmdbSeriesProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="E:MediaBrowser.Providers.Subtitles.SubtitleManager.SubtitleDownloadFailure">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.SearchSubtitles(MediaBrowser.Controller.Subtitles.SubtitleSearchRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.DownloadSubtitles(MediaBrowser.Controller.Entities.Video,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.DownloadSubtitles(MediaBrowser.Controller.Entities.Video,MediaBrowser.Model.Configuration.LibraryOptions,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.UploadSubtitle(MediaBrowser.Controller.Entities.Video,MediaBrowser.Controller.Subtitles.SubtitleResponse)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.SearchSubtitles(MediaBrowser.Controller.Entities.Video,System.String,System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.DeleteSubtitles(MediaBrowser.Controller.Entities.BaseItem,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.GetRemoteSubtitles(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.GetSupportedProviders(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Trickplay.TrickplayImagesTask">
            <summary>
            Class TrickplayImagesTask.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayImagesTask.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Trickplay.TrickplayImagesTask},MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.Trickplay.ITrickplayManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Trickplay.TrickplayImagesTask"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="libraryManager">The library manager.</param>
            <param name="localization">The localization manager.</param>
            <param name="trickplayManager">The trickplay manager.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayImagesTask.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayImagesTask.Description">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayImagesTask.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayImagesTask.Category">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayImagesTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayImagesTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask">
            <summary>
            Class TrickplayMoveImagesTask.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask.#ctor(Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask},MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.Trickplay.ITrickplayManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="libraryManager">The library manager.</param>
            <param name="localization">The localization manager.</param>
            <param name="trickplayManager">The trickplay manager.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask.Description">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask.Category">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayMoveImagesTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Trickplay.TrickplayProvider">
            <summary>
            Class TrickplayProvider. Provides images and metadata for trickplay
            scrubbing previews.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayProvider.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Trickplay.ITrickplayManager,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Trickplay.TrickplayProvider"/> class.
            </summary>
            <param name="config">The configuration manager.</param>
            <param name="trickplayManager">The trickplay manager.</param>
            <param name="libraryManager">The library manager.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Trickplay.TrickplayProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayProvider.HasChanged(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.IDirectoryService)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayProvider.FetchAsync(MediaBrowser.Controller.Entities.TV.Episode,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayProvider.FetchAsync(MediaBrowser.Controller.Entities.MusicVideo,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayProvider.FetchAsync(MediaBrowser.Controller.Entities.Movies.Movie,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayProvider.FetchAsync(MediaBrowser.Controller.Entities.Trailer,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Trickplay.TrickplayProvider.FetchAsync(MediaBrowser.Controller.Entities.Video,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.TV.EpisodeMetadataService">
            <summary>
            Service to manage episode metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.TV.EpisodeMetadataService.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.TV.EpisodeMetadataService},MediaBrowser.Controller.Providers.IProviderManager,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.TV.EpisodeMetadataService"/> class.
            </summary>
            <param name="serverConfigurationManager">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="providerManager">Instance of the <see cref="T:MediaBrowser.Controller.Providers.IProviderManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
        </member>
        <member name="M:MediaBrowser.Providers.TV.EpisodeMetadataService.BeforeSaveInternal(MediaBrowser.Controller.Entities.TV.Episode,System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.EpisodeMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Episode},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Episode},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.TV.SeasonMetadataService">
            <summary>
            Service to manage season metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeasonMetadataService.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.TV.SeasonMetadataService},MediaBrowser.Controller.Providers.IProviderManager,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.TV.SeasonMetadataService"/> class.
            </summary>
            <param name="serverConfigurationManager">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="providerManager">Instance of the <see cref="T:MediaBrowser.Controller.Providers.IProviderManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
        </member>
        <member name="P:MediaBrowser.Providers.TV.SeasonMetadataService.EnableUpdatingPremiereDateFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeasonMetadataService.BeforeSaveInternal(MediaBrowser.Controller.Entities.TV.Season,System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeasonMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Entities.TV.Season)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeasonMetadataService.UpdateMetadataFromChildren(MediaBrowser.Controller.Entities.TV.Season,System.Collections.Generic.IList{MediaBrowser.Controller.Entities.BaseItem},System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.TV.SeriesMetadataService">
            <summary>
            Service to manage series metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,Microsoft.Extensions.Logging.ILogger{MediaBrowser.Providers.TV.SeriesMetadataService},MediaBrowser.Controller.Providers.IProviderManager,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.TV.SeriesMetadataService"/> class.
            </summary>
            <param name="serverConfigurationManager">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="providerManager">Instance of the <see cref="T:MediaBrowser.Controller.Providers.IProviderManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="localizationManager">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.RefreshMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.AfterMetadataRefresh(MediaBrowser.Controller.Entities.TV.Series,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Series},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Series},MediaBrowser.Model.Entities.MetadataField[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.CreateSeasonsAsync(MediaBrowser.Controller.Entities.TV.Series,System.Threading.CancellationToken)">
            <summary>
            Creates seasons for all episodes if they don't exist.
            If no season number can be determined, a dummy season will be created.
            </summary>
            <param name="series">The series.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The async task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.CreateSeasonAsync(MediaBrowser.Controller.Entities.TV.Series,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Creates a new season, adds it to the database by linking it to the [series] and refreshes the metadata.
            </summary>
            <param name="series">The series.</param>
            <param name="seasonName">The season name.</param>
            <param name="seasonNumber">The season number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created season.</returns>
        </member>
        <member name="P:MediaBrowser.Providers.TV.Zap2ItExternalId.ProviderName">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.Zap2ItExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.Zap2ItExternalId.Type">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.Zap2ItExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.Zap2ItExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Videos.VideoMetadataService.Order">
            <inheritdoc />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NonWordRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NonWordRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NonWordRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonWordRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NonWordRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonWordRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NonWordRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonWordRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonWordRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NonWordRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_0E37C94CCBE29E4788589195726106819FCAFB1EB4F7B27C575D1EF8EE5CA280(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [_\W].</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
