<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emby.Server.Implementations</name>
    </assembly>
    <members>
        <member name="T:Emby.Server.Implementations.AppBase.BaseApplicationPaths">
            <summary>
            Provides a base class to hold common application paths used by both the UI and Server.
            This can be subclassed to add application-specific paths.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseApplicationPaths.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.AppBase.BaseApplicationPaths"/> class.
            </summary>
            <param name="programDataPath">The program data path.</param>
            <param name="logDirectoryPath">The log directory path.</param>
            <param name="configurationDirectoryPath">The configuration directory path.</param>
            <param name="cacheDirectoryPath">The cache directory path.</param>
            <param name="webDirectoryPath">The web directory path.</param>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.ProgramDataPath">
            <summary>
            Gets the path to the program data folder.
            </summary>
            <value>The program data path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.WebPath">
            <inheritdoc/>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.ProgramSystemPath">
            <summary>
            Gets the path to the system folder.
            </summary>
            <value>The path to the system folder.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.DataPath">
            <summary>
            Gets the folder path to the data directory.
            </summary>
            <value>The data directory.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.VirtualDataPath">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.ImageCachePath">
            <summary>
            Gets the image cache path.
            </summary>
            <value>The image cache path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.PluginsPath">
            <summary>
            Gets the path to the plugin directory.
            </summary>
            <value>The plugins path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.PluginConfigurationsPath">
            <summary>
            Gets the path to the plugin configurations directory.
            </summary>
            <value>The plugin configurations path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.LogDirectoryPath">
            <summary>
            Gets the path to the log directory.
            </summary>
            <value>The log directory path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.ConfigurationDirectoryPath">
            <summary>
            Gets the path to the application configuration root directory.
            </summary>
            <value>The configuration directory path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.SystemConfigurationFilePath">
            <summary>
            Gets the path to the system configuration file.
            </summary>
            <value>The system configuration file path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.CachePath">
            <summary>
            Gets or sets the folder path to the cache directory.
            </summary>
            <value>The cache directory.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseApplicationPaths.TempDirectory">
            <summary>
            Gets the folder path to the temp directory within the cache folder.
            </summary>
            <value>The temp directory.</value>
        </member>
        <member name="T:Emby.Server.Implementations.AppBase.BaseConfigurationManager">
            <summary>
            Class BaseConfigurationManager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.AppBase.BaseConfigurationManager._configuration">
            <summary>
            The _configuration.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,Microsoft.Extensions.Logging.ILoggerFactory,MediaBrowser.Model.Serialization.IXmlSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.AppBase.BaseConfigurationManager" /> class.
            </summary>
            <param name="applicationPaths">The application paths.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="xmlSerializer">The XML serializer.</param>
        </member>
        <member name="E:Emby.Server.Implementations.AppBase.BaseConfigurationManager.ConfigurationUpdated">
            <summary>
            Occurs when [configuration updated].
            </summary>
        </member>
        <member name="E:Emby.Server.Implementations.AppBase.BaseConfigurationManager.NamedConfigurationUpdating">
            <summary>
            Occurs when [configuration updating].
            </summary>
        </member>
        <member name="E:Emby.Server.Implementations.AppBase.BaseConfigurationManager.NamedConfigurationUpdated">
            <summary>
            Occurs when [named configuration updated].
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseConfigurationManager.ConfigurationType">
            <summary>
            Gets the type of the configuration.
            </summary>
            <value>The type of the configuration.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseConfigurationManager.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseConfigurationManager.XmlSerializer">
            <summary>
            Gets the XML serializer.
            </summary>
            <value>The XML serializer.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseConfigurationManager.CommonApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:Emby.Server.Implementations.AppBase.BaseConfigurationManager.CommonConfiguration">
            <summary>
            Gets or sets the system configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.RegisterConfiguration``1">
            <summary>
            Manually pre-loads a factory so that it is available pre system initialisation.
            </summary>
            <typeparam name="T">Class to register.</typeparam>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Common.Configuration.IConfigurationFactory})">
            <summary>
            Adds parts.
            </summary>
            <param name="factories">The configuration factories.</param>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.SaveConfiguration">
            <summary>
            Saves the configuration.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.OnConfigurationUpdated">
            <summary>
            Called when [configuration updated].
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.ReplaceConfiguration(MediaBrowser.Model.Configuration.BaseApplicationConfiguration)">
            <summary>
            Replaces the configuration.
            </summary>
            <param name="newConfiguration">The new configuration.</param>
            <exception cref="T:System.ArgumentNullException"><c>newConfiguration</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.UpdateCachePath">
            <summary>
            Updates the items by name path.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.ValidateCachePath(MediaBrowser.Model.Configuration.BaseApplicationConfiguration)">
            <summary>
            Replaces the cache path.
            </summary>
            <param name="newConfig">The new configuration.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The new cache path doesn't exist.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.EnsureWriteAccess(System.String)">
            <summary>
            Ensures that we have write access to the path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.GetConfiguration(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.SaveConfiguration(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.OnNamedConfigurationUpdated(System.String,System.Object)">
            <summary>
            Event handler for when a named configuration has been updated.
            </summary>
            <param name="key">The key of the configuration.</param>
            <param name="configuration">The old configuration.</param>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.GetConfigurationStores">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.BaseConfigurationManager.GetConfigurationType(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.AppBase.ConfigurationHelper">
            <summary>
            Class ConfigurationHelper.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.AppBase.ConfigurationHelper.GetXmlConfiguration(System.Type,System.String,MediaBrowser.Model.Serialization.IXmlSerializer)">
            <summary>
            Reads an xml configuration file from the file system
            It will immediately re-serialize and save if new serialization data is available due to property changes.
            </summary>
            <param name="type">The type.</param>
            <param name="path">The path.</param>
            <param name="xmlSerializer">The XML serializer.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.ApplicationHost">
            <summary>
            Class CompositionRoot.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.ApplicationHost._disposableParts">
            <summary>
            The disposable parts.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.ApplicationHost._allConcreteTypes">
            <summary>
            Gets or sets all concrete types.
            </summary>
            <value>All concrete types.</value>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.#ctor(MediaBrowser.Controller.IServerApplicationPaths,Microsoft.Extensions.Logging.ILoggerFactory,Emby.Server.Implementations.IStartupOptions,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ApplicationHost"/> class.
            </summary>
            <param name="applicationPaths">Instance of the <see cref="T:MediaBrowser.Controller.IServerApplicationPaths"/> interface.</param>
            <param name="loggerFactory">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> interface.</param>
            <param name="options">Instance of the <see cref="T:Emby.Server.Implementations.IStartupOptions"/> interface.</param>
            <param name="startupConfig">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" /> interface.</param>
        </member>
        <member name="E:Emby.Server.Implementations.ApplicationHost.HasPendingRestartChanged">
            <summary>
            Occurs when [has pending restart changed].
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.PublishedServerUrl">
            <summary>
            Gets the value of the PublishedServerUrl setting.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.NetManager">
            <summary>
            Gets the <see cref="T:MediaBrowser.Common.Net.INetworkManager"/> singleton instance.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.HasPendingRestart">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ShouldRestart">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.LoggerFactory">
            <summary>
            Gets the logger factory.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ConfigurationManager">
            <summary>
            Gets the configuration manager.
            </summary>
            <value>The configuration manager.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ServiceProvider">
            <summary>
            Gets or sets the service provider.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.HttpPort">
            <summary>
            Gets the http port for the webhost.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.HttpsPort">
            <summary>
            Gets the https port for the webhost.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ApplicationVersion">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ApplicationVersionString">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ApplicationUserAgent">
            <summary>
            Gets the current application user agent.
            </summary>
            <value>The application user agent.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ApplicationUserAgentAddress">
            <summary>
            Gets the email address for use within a comment section of a user agent field.
            Presently used to provide contact information to MusicBrainz service.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ApplicationProductName">
            <summary>
            Gets the current application name.
            </summary>
            <value>The application name.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.Name">
            <inheritdoc/>
        </member>
        <member name="P:Emby.Server.Implementations.ApplicationHost.ListenWithHttps">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.CreateInstanceSafe(System.Type)">
            <summary>
            Creates the instance safe.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>``0.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetExportTypes``1">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetExports``1(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetExports``1(MediaBrowser.Common.CreationDelegateFactory,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.RunStartupTasksAsync">
            <summary>
            Runs the startup tasks.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task" />.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.Init(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers services/resources with the service collection that will be available via DI.
            </summary>
            <param name="serviceCollection">Instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> interface.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.InitializeServices">
            <summary>
            Create services registered with the service container that need to be initialized at application startup.
            </summary>
            <returns>A task representing the service initialization operation.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.SetStaticProperties">
            <summary>
            Dirty hacks.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.FindParts">
            <summary>
            Finds plugin components and register them with the appropriate services.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.DiscoverTypes">
            <summary>
            Discovers the types.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.OnConfigurationUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when [configuration updated].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.ValidateSslCertificate(MediaBrowser.Common.Net.NetworkConfiguration)">
            <summary>
            Validates the SSL certificate.
            </summary>
            <param name="networkConfig">The new configuration.</param>
            <exception cref="T:System.IO.FileNotFoundException">The certificate path doesn't exist.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.NotifyPendingRestart">
            <summary>
            Notifies the kernel that a change has been made that requires a restart.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetComposablePartAssemblies">
            <summary>
            Gets the composable part assemblies.
            </summary>
            <returns>IEnumerable{Assembly}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetSmartApiUrl(System.Net.IPAddress)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetSmartApiUrl(Microsoft.AspNetCore.Http.HttpRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetSmartApiUrl(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetApiUrlForLocalAccess(System.Net.IPAddress,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.GetLocalApiUrl(System.String,System.String,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ApplicationHost.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Emby.Server.Implementations.Branding.BrandingConfigurationFactory">
            <summary>
            A configuration factory for <see cref="T:MediaBrowser.Model.Branding.BrandingOptions"/>.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Branding.BrandingConfigurationFactory.GetConfigurations">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Collections.CollectionImageProvider">
            <summary>
            A collection image provider.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionImageProvider.#ctor(MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Providers.IProviderManager,MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Controller.Drawing.IImageProcessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Collections.CollectionImageProvider"/> class.
            </summary>
            <param name="fileSystem">The filesystem.</param>
            <param name="providerManager">The provider manager.</param>
            <param name="applicationPaths">The application paths.</param>
            <param name="imageProcessor">The image processor.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionImageProvider.GetItemsWithImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionImageProvider.CreateImage(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.IReadOnlyCollection{MediaBrowser.Controller.Entities.BaseItem},System.String,MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Collections.CollectionManager">
            <summary>
            The collection manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionManager.#ctor(MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryMonitor,Microsoft.Extensions.Logging.ILoggerFactory,MediaBrowser.Controller.Providers.IProviderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Collections.CollectionManager"/> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="appPaths">The application paths.</param>
            <param name="localizationManager">The localization manager.</param>
            <param name="fileSystem">The filesystem.</param>
            <param name="iLibraryMonitor">The library monitor.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="providerManager">The provider manager.</param>
        </member>
        <member name="E:Emby.Server.Implementations.Collections.CollectionManager.CollectionCreated">
            <inheritdoc />
        </member>
        <member name="E:Emby.Server.Implementations.Collections.CollectionManager.ItemsAddedToCollection">
            <inheritdoc />
        </member>
        <member name="E:Emby.Server.Implementations.Collections.CollectionManager.ItemsRemovedFromCollection">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionManager.GetCollectionsFolder(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionManager.CreateCollectionAsync(MediaBrowser.Controller.Collections.CollectionCreationOptions)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionManager.AddToCollectionAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionManager.RemoveFromCollectionAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Collections.CollectionManager.CollapseItemsWithinBoxSets(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.BaseItem},Jellyfin.Data.Entities.User)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Configuration.ServerConfigurationManager">
            <summary>
            Class ServerConfigurationManager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Configuration.ServerConfigurationManager.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,Microsoft.Extensions.Logging.ILoggerFactory,MediaBrowser.Model.Serialization.IXmlSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Configuration.ServerConfigurationManager" /> class.
            </summary>
            <param name="applicationPaths">The application paths.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="xmlSerializer">The XML serializer.</param>
        </member>
        <member name="E:Emby.Server.Implementations.Configuration.ServerConfigurationManager.ConfigurationUpdating">
            <summary>
            Configuration updating event.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Configuration.ServerConfigurationManager.ConfigurationType">
            <summary>
            Gets the type of the configuration.
            </summary>
            <value>The type of the configuration.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Configuration.ServerConfigurationManager.ApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Configuration.ServerConfigurationManager.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Configuration.ServerConfigurationManager.OnConfigurationUpdated">
            <summary>
            Called when [configuration updated].
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Configuration.ServerConfigurationManager.UpdateMetadataPath">
            <summary>
            Updates the metadata path.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">If the directory does not exist, and the caller does not have the required permission to create it.</exception>
            <exception cref="T:System.NotSupportedException">If there is a custom path transcoding path specified, but it is invalid.</exception>
            <exception cref="T:System.IO.IOException">If the directory does not exist, and it also could not be created.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Configuration.ServerConfigurationManager.ReplaceConfiguration(MediaBrowser.Model.Configuration.BaseApplicationConfiguration)">
            <summary>
            Replaces the configuration.
            </summary>
            <param name="newConfiguration">The new configuration.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the configuration path doesn't exist.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Configuration.ServerConfigurationManager.ValidateMetadataPath(MediaBrowser.Model.Configuration.ServerConfiguration)">
            <summary>
            Validates the metadata path.
            </summary>
            <param name="newConfig">The new configuration.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The new config path doesn't exist.</exception>
        </member>
        <member name="T:Emby.Server.Implementations.ConfigurationOptions">
            <summary>
            Static class containing the default configuration options for the web server.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.ConfigurationOptions.DefaultConfiguration">
            <summary>
            Gets a new copy of the default configuration options.
            </summary>
        </member>
        <member name="T:Emby.Server.Implementations.Cryptography.CryptographyProvider">
            <summary>
            Class providing abstractions over cryptographic functions.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Cryptography.CryptographyProvider.DefaultHashMethod">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Cryptography.CryptographyProvider.CreatePasswordHash(System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Cryptography.CryptographyProvider.Verify(MediaBrowser.Model.Cryptography.PasswordHash,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Cryptography.CryptographyProvider.GenerateSalt">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Cryptography.CryptographyProvider.GenerateSalt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.BaseSqliteRepository.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Data.BaseSqliteRepository})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Data.BaseSqliteRepository"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.DbFilePath">
            <summary>
            Gets or sets the path to the DB file.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.CacheSize">
            <summary>
            Gets the cache size.
            </summary>
            <value>The cache size or null.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.LockingMode">
            <summary>
            Gets the locking mode. <see href="https://www.sqlite.org/pragma.html#pragma_locking_mode" />.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.JournalMode">
            <summary>
            Gets the journal mode. <see href="https://www.sqlite.org/pragma.html#pragma_journal_mode" />.
            </summary>
            <value>The journal mode.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.JournalSizeLimit">
            <summary>
            Gets the journal size limit. <see href="https://www.sqlite.org/pragma.html#pragma_journal_size_limit" />.
            The default (-1) is overridden to prevent unconstrained WAL size, as reported by users.
            </summary>
            <value>The journal size limit.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.PageSize">
            <summary>
            Gets the page size.
            </summary>
            <value>The page size or null.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.TempStore">
            <summary>
            Gets the temp store mode.
            </summary>
            <value>The temp store mode.</value>
            <see cref="T:Emby.Server.Implementations.Data.TempStoreMode"/>
        </member>
        <member name="P:Emby.Server.Implementations.Data.BaseSqliteRepository.Synchronous">
            <summary>
            Gets the synchronous mode.
            </summary>
            <value>The synchronous mode or null.</value>
            <see cref="T:Emby.Server.Implementations.Data.SynchronousMode"/>
        </member>
        <member name="M:Emby.Server.Implementations.Data.BaseSqliteRepository.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.BaseSqliteRepository.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:Emby.Server.Implementations.Data.SqliteExtensions._datetimeFormats">
            <summary>
            An array of ISO-8601 DateTime formats that we support parsing.
            </summary>
        </member>
        <member name="T:Emby.Server.Implementations.Data.SqliteItemRepository">
            <summary>
            Class SQLiteItemRepository.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.IServerApplicationHost,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Data.SqliteItemRepository},MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.Drawing.IImageProcessor,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Data.SqliteItemRepository"/> class.
            </summary>
            <param name="config">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
            <param name="appHost">Instance of the <see cref="T:MediaBrowser.Controller.IServerApplicationHost"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
            <param name="imageProcessor">Instance of the <see cref="T:MediaBrowser.Controller.Drawing.IImageProcessor"/> interface.</param>
            <param name="configuration">Instance of the <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> interface.</param>
            <exception cref="T:System.ArgumentNullException">config is null.</exception>
        </member>
        <member name="P:Emby.Server.Implementations.Data.SqliteItemRepository.CacheSize">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.Data.SqliteItemRepository.TempStore">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.Initialize">
            <summary>
            Opens the connection to the database.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.SaveImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.SaveItems(System.Collections.Generic.IReadOnlyList{MediaBrowser.Controller.Entities.BaseItem},System.Threading.CancellationToken)">
            <summary>
            Saves the items.
            </summary>
            <param name="items">The items.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items"/> or <paramref name="cancellationToken"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.RetrieveItem(System.Guid)">
            <summary>
            Internal retrieve from items or users table.
            </summary>
            <param name="id">The id.</param>
            <returns>BaseItem.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramr name="id"/> is <seealso cref="F:System.Guid.Empty"/>.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetChapters(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetChapter(MediaBrowser.Controller.Entities.BaseItem,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetChapter(Microsoft.Data.Sqlite.SqliteDataReader,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the chapter.
            </summary>
            <param name="reader">The reader.</param>
            <param name="item">The item.</param>
            <returns>ChapterInfo.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.SaveChapters(System.Guid,System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Entities.ChapterInfo})">
            <summary>
            Saves the chapters.
            </summary>
            <param name="id">The item id.</param>
            <param name="chapters">The chapters.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetCount(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetItemList(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetItems(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetItemIdsList(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetProviderIdClause(System.Boolean,System.String)">
            <summary>
            Formats a where clause for the specified provider.
            </summary>
            <param name="includeResults">Whether or not to include items with this provider's ids.</param>
            <param name="provider">Provider name.</param>
            <returns>Formatted SQL clause.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.UpdateInheritedValues">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.DeleteItem(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetPeopleNames(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetPeople(MediaBrowser.Controller.Entities.InternalPeopleQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetAllArtists(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetArtists(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetAlbumArtists(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetStudios(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetGenres(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetMusicGenres(MediaBrowser.Controller.Entities.InternalItemsQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetStudioNames">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetAllArtistNames">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetMusicGenreNames">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetGenreNames">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.UpdatePeople(System.Guid,System.Collections.Generic.List{MediaBrowser.Controller.Entities.PersonInfo})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetMediaStreams(MediaBrowser.Controller.Persistence.MediaStreamQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.SaveMediaStreams(System.Guid,System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Entities.MediaStream},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetMediaStream(Microsoft.Data.Sqlite.SqliteDataReader)">
            <summary>
            Gets the media stream.
            </summary>
            <param name="reader">The reader.</param>
            <returns>MediaStream.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetMediaAttachments(MediaBrowser.Controller.Persistence.MediaAttachmentQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.SaveMediaAttachments(System.Guid,System.Collections.Generic.IReadOnlyList{MediaBrowser.Model.Entities.MediaAttachment},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteItemRepository.GetMediaAttachment(Microsoft.Data.Sqlite.SqliteDataReader)">
            <summary>
            Gets the attachment.
            </summary>
            <param name="reader">The reader.</param>
            <returns>MediaAttachment.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteUserDataRepository.Initialize">
            <summary>
            Opens the connection to the database.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteUserDataRepository.SaveUserData(System.Int64,System.String,MediaBrowser.Controller.Entities.UserItemData,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteUserDataRepository.SaveAllUserData(System.Int64,MediaBrowser.Controller.Entities.UserItemData[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteUserDataRepository.PersistUserData(System.Int64,System.String,MediaBrowser.Controller.Entities.UserItemData,System.Threading.CancellationToken)">
            <summary>
            Persists the user data.
            </summary>
            <param name="internalUserId">The user id.</param>
            <param name="key">The key.</param>
            <param name="userData">The user data.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteUserDataRepository.PersistAllUserData(System.Int64,MediaBrowser.Controller.Entities.UserItemData[],System.Threading.CancellationToken)">
            <summary>
            Persist all user data for the specified user.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteUserDataRepository.GetUserData(System.Int64,System.String)">
            <summary>
            Gets the user data.
            </summary>
            <param name="userId">The user id.</param>
            <param name="key">The key.</param>
            <returns>Task{UserItemData}.</returns>
            <exception cref="T:System.ArgumentNullException">
            userId
            or
            key.
            </exception>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteUserDataRepository.GetAllUserData(System.Int64)">
            <summary>
            Return all user-data associated with the given user.
            </summary>
            <param name="userId">The internal user id.</param>
            <returns>The list of user item data.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Data.SqliteUserDataRepository.ReadRow(Microsoft.Data.Sqlite.SqliteDataReader)">
            <summary>
            Read a row from the specified reader into the provided userData object.
            </summary>
            <param name="reader">The list of result set values.</param>
            <returns>The user item data.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Data.SynchronousMode">
            <summary>
            The disk synchronization mode, controls how aggressively SQLite will write data
            all the way out to physical storage.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Data.SynchronousMode.Off">
            <summary>
            SQLite continues without syncing as soon as it has handed data off to the operating system.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Data.SynchronousMode.Normal">
            <summary>
            SQLite database engine will still sync at the most critical moments.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Data.SynchronousMode.Full">
            <summary>
            SQLite database engine will use the xSync method of the VFS
            to ensure that all content is safely written to the disk surface prior to continuing.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Data.SynchronousMode.Extra">
            <summary>
            EXTRA synchronous is like FULL with the addition that the directory containing a rollback journal
            is synced after that journal is unlinked to commit a transaction in DELETE mode.
            </summary>
        </member>
        <member name="T:Emby.Server.Implementations.Data.TempStoreMode">
            <summary>
            Storage mode used by temporary database files.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Data.TempStoreMode.Default">
            <summary>
            The compile-time C preprocessor macro SQLITE_TEMP_STORE
            is used to determine where temporary tables and indices are stored.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Data.TempStoreMode.File">
            <summary>
            Temporary tables and indices are stored in a file.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Data.TempStoreMode.Memory">
            <summary>
            Temporary tables and indices are kept in as if they were pure in-memory databases memory.
            </summary>
        </member>
        <member name="T:Emby.Server.Implementations.Data.TypeMapper">
            <summary>
            Class TypeMapper.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Data.TypeMapper._typeMap">
            <summary>
            This holds all the types in the running assemblies
            so that we can de-serialize properly when we don't have strong types.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Data.TypeMapper.GetType(System.String)">
            <summary>
            Gets the type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>Type.</returns>
            <exception cref="T:System.ArgumentNullException"><c>typeName</c> is null.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Dto.DtoService.GetBaseItemDtos(System.Collections.Generic.IReadOnlyList{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Dto.DtoOptions,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Dto.DtoService.GetItemByNameDto(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Dto.DtoOptions,System.Collections.Generic.List{MediaBrowser.Controller.Entities.BaseItem},Jellyfin.Data.Entities.User)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Dto.DtoService.AttachUserSpecificInfo(MediaBrowser.Model.Dto.BaseItemDto,MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Attaches the user specific info.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Dto.DtoService.AttachPeople(MediaBrowser.Model.Dto.BaseItemDto,MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User)">
            <summary>
            Attaches People DTO's to a DTOBaseItem.
            </summary>
            <param name="dto">The dto.</param>
            <param name="item">The item.</param>
            <param name="user">The requesting user.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Dto.DtoService.AttachStudios(MediaBrowser.Model.Dto.BaseItemDto,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Attaches the studios.
            </summary>
            <param name="dto">The dto.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Dto.DtoService.AttachBasicFields(MediaBrowser.Model.Dto.BaseItemDto,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Dto.DtoOptions)">
            <summary>
            Sets simple property values on a DTOBaseItem.
            </summary>
            <param name="dto">The dto.</param>
            <param name="item">The item.</param>
            <param name="owner">The owner.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Dto.DtoService.AttachPrimaryImageAspectRatio(MediaBrowser.Model.Dto.IItemDto,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Attaches the primary image aspect ratio.
            </summary>
            <param name="dto">The dto.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:Emby.Server.Implementations.EntryPoints.LibraryChangedNotifier">
            <summary>
            A <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/> responsible for notifying users when libraries are updated.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.EntryPoints.LibraryChangedNotifier.#ctor(MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Session.ISessionManager,MediaBrowser.Controller.Library.IUserManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.EntryPoints.LibraryChangedNotifier},MediaBrowser.Controller.Providers.IProviderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.EntryPoints.LibraryChangedNotifier"/> class.
            </summary>
            <param name="libraryManager">The <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/>.</param>
            <param name="configurationManager">The <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/>.</param>
            <param name="sessionManager">The <see cref="T:MediaBrowser.Controller.Session.ISessionManager"/>.</param>
            <param name="userManager">The <see cref="T:MediaBrowser.Controller.Library.IUserManager"/>.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</param>
            <param name="providerManager">The <see cref="T:MediaBrowser.Controller.Providers.IProviderManager"/>.</param>
        </member>
        <member name="M:Emby.Server.Implementations.EntryPoints.LibraryChangedNotifier.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.EntryPoints.LibraryChangedNotifier.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.EntryPoints.LibraryChangedNotifier.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.EntryPoints.UserDataChangeNotifier">
            <summary>
            <see cref="T:Microsoft.Extensions.Hosting.IHostedService"/> responsible for notifying users when associated item data is updated.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.EntryPoints.UserDataChangeNotifier.#ctor(MediaBrowser.Controller.Library.IUserDataManager,MediaBrowser.Controller.Session.ISessionManager,MediaBrowser.Controller.Library.IUserManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.EntryPoints.UserDataChangeNotifier"/> class.
            </summary>
            <param name="userDataManager">The <see cref="T:MediaBrowser.Controller.Library.IUserDataManager"/>.</param>
            <param name="sessionManager">The <see cref="T:MediaBrowser.Controller.Session.ISessionManager"/>.</param>
            <param name="userManager">The <see cref="T:MediaBrowser.Controller.Library.IUserManager"/>.</param>
        </member>
        <member name="M:Emby.Server.Implementations.EntryPoints.UserDataChangeNotifier.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.EntryPoints.UserDataChangeNotifier.StopAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.EntryPoints.UserDataChangeNotifier.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.HttpServer.WebSocketConnection">
            <summary>
            Class WebSocketConnection.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.HttpServer.WebSocketConnection._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.HttpServer.WebSocketConnection._jsonOptions">
            <summary>
            The json serializer options.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.HttpServer.WebSocketConnection._socket">
            <summary>
            The socket.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.HttpServer.WebSocketConnection},System.Net.WebSockets.WebSocket,MediaBrowser.Controller.Net.AuthorizationInfo,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.HttpServer.WebSocketConnection" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="socket">The socket.</param>
            <param name="authorizationInfo">The authorization information.</param>
            <param name="remoteEndPoint">The remote end point.</param>
        </member>
        <member name="E:Emby.Server.Implementations.HttpServer.WebSocketConnection.Closed">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.HttpServer.WebSocketConnection.AuthorizationInfo">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.HttpServer.WebSocketConnection.RemoteEndPoint">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.HttpServer.WebSocketConnection.OnReceive">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.HttpServer.WebSocketConnection.LastActivityDate">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.HttpServer.WebSocketConnection.LastKeepAliveDate">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.HttpServer.WebSocketConnection.State">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.SendAsync(MediaBrowser.Controller.Net.WebSocketMessages.OutboundWebSocketMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.SendAsync``1(MediaBrowser.Controller.Net.WebSocketMessages.OutboundWebSocketMessage{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.ReceiveAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.DisposeAsyncCore">
            <summary>
            Used to perform asynchronous cleanup of managed resources or for cascading calls to <see cref="M:Emby.Server.Implementations.HttpServer.WebSocketConnection.DisposeAsync"/>.
            </summary>
            <returns>A ValueTask.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketManager.WebSocketRequestHandler(Microsoft.AspNetCore.Http.HttpContext)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.HttpServer.WebSocketManager.ProcessWebSocketMessageReceived(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Processes the web socket message received.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:Emby.Server.Implementations.Images.ArtistImageProvider">
            <summary>
            Class ArtistImageProvider.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Images.ArtistImageProvider.GetItemsWithImages(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Get children objects used to create an artist image.
            </summary>
            <param name="item">The artist used to create the image.</param>
            <returns>Any relevant children objects.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Images.BaseDynamicImageProvider`1.Name">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Images.GenreImageProvider">
            <summary>
            Class GenreImageProvider.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Images.GenreImageProvider._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Images.GenreImageProvider.GetItemsWithImages(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Get children objects used to create an genre image.
            </summary>
            <param name="item">The genre used to create the image.</param>
            <returns>Any relevant children objects.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Images.MusicGenreImageProvider">
            <summary>
            Class MusicGenreImageProvider.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Images.MusicGenreImageProvider._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Images.MusicGenreImageProvider.GetItemsWithImages(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Get children objects used to create an music genre image.
            </summary>
            <param name="item">The music genre used to create the image.</param>
            <returns>Any relevant children objects.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.IO.FileRefresher.GetAffectedBaseItem(System.String)">
            <summary>
            Gets the affected base item.
            </summary>
            <param name="path">The path.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.IO.FileRefresher.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.IO.LibraryMonitor">
            <inheritdoc cref="T:MediaBrowser.Controller.Library.ILibraryMonitor" />
        </member>
        <member name="F:Emby.Server.Implementations.IO.LibraryMonitor._fileSystemWatchers">
            <summary>
            The file system watchers.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.IO.LibraryMonitor._activeRefreshers">
            <summary>
            The affected paths.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.IO.LibraryMonitor._tempIgnoredPaths">
            <summary>
            A dynamic list of paths that should be ignored.  Added to during our own file system modifications.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.IO.LibraryMonitor},MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Model.IO.IFileSystem,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.IO.LibraryMonitor" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="libraryManager">The library manager.</param>
            <param name="configurationManager">The configuration manager.</param>
            <param name="fileSystem">The filesystem.</param>
            <param name="appLifetime">The <see cref="T:Microsoft.Extensions.Hosting.IHostApplicationLifetime"/>.</param>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.ReportFileSystemChangeBeginning(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.ReportFileSystemChangeComplete(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.Start">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.OnLibraryManagerItemRemoved(System.Object,MediaBrowser.Controller.Library.ItemChangeEventArgs)">
            <summary>
            Handles the ItemRemoved event of the LibraryManager control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:MediaBrowser.Controller.Library.ItemChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.OnLibraryManagerItemAdded(System.Object,MediaBrowser.Controller.Library.ItemChangeEventArgs)">
            <summary>
            Handles the ItemAdded event of the LibraryManager control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:MediaBrowser.Controller.Library.ItemChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.ContainsParentFolder(System.Collections.Generic.IReadOnlyList{System.String},System.ReadOnlySpan{System.Char})">
            <summary>
            Examine a list of strings assumed to be file paths to see if it contains a parent of
            the provided path.
            </summary>
            <param name="lst">The LST.</param>
            <param name="path">The path.</param>
            <returns><c>true</c> if [contains parent folder] [the specified LST]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.StartWatchingPath(System.String)">
            <summary>
            Starts the watching path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.StopWatchingPath(System.String)">
            <summary>
            Stops the watching path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.DisposeWatcher(System.IO.FileSystemWatcher,System.Boolean)">
            <summary>
            Disposes the watcher.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.OnWatcherError(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Handles the Error event of the watcher control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.IO.ErrorEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.OnWatcherChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Handles the Changed event of the watcher control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.IO.FileSystemEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.ReportFileSystemChanged(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.IO.LibraryMonitor.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.IO.ManagedFileSystem">
            <summary>
            Class ManagedFileSystem.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.IO.ManagedFileSystem},MediaBrowser.Common.Configuration.IApplicationPaths,System.Collections.Generic.IEnumerable{MediaBrowser.Model.IO.IShortcutHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.IO.ManagedFileSystem"/> class.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to use.</param>
            <param name="applicationPaths">The <see cref="T:MediaBrowser.Common.Configuration.IApplicationPaths"/> instance to use.</param>
            <param name="shortcutHandlers">the <see cref="T:MediaBrowser.Model.IO.IShortcutHandler"/>'s to use.</param>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.IsShortcut(System.String)">
            <summary>
            Determines whether the specified filename is shortcut.
            </summary>
            <param name="filename">The filename.</param>
            <returns><c>true</c> if the specified filename is shortcut; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.ResolveShortcut(System.String)">
            <summary>
            Resolves the shortcut.
            </summary>
            <param name="filename">The filename.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.MakeAbsolutePath(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.CreateShortcut(System.String,System.String)">
            <summary>
            Creates the shortcut.
            </summary>
            <param name="shortcutPath">The shortcut path.</param>
            <param name="target">The target.</param>
            <exception cref="T:System.ArgumentNullException">The shortcutPath or target is null.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.MoveDirectory(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFileSystemInfo(System.String)">
            <summary>
            Returns a <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object for the specified file or directory path.
            </summary>
            <param name="path">A path to a file or directory.</param>
            <returns>A <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object.</returns>
            <remarks>If the specified path points to a directory, the returned <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object's
            <see cref="P:MediaBrowser.Model.IO.FileSystemMetadata.IsDirectory"/> property will be set to true and all other properties will reflect the properties of the directory.</remarks>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFileInfo(System.String)">
            <summary>
            Returns a <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object for the specified file path.
            </summary>
            <param name="path">A path to a file.</param>
            <returns>A <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object.</returns>
            <remarks><para>If the specified path points to a directory, the returned <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object's
            <see cref="P:MediaBrowser.Model.IO.FileSystemMetadata.IsDirectory"/> property and the <see cref="P:MediaBrowser.Model.IO.FileSystemMetadata.Exists"/> property will both be set to false.</para>
            <para>For automatic handling of files <b>and</b> directories, use <see cref="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFileSystemInfo(System.String)"/>.</para></remarks>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetDirectoryInfo(System.String)">
            <summary>
            Returns a <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object for the specified directory path.
            </summary>
            <param name="path">A path to a directory.</param>
            <returns>A <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object.</returns>
            <remarks><para>If the specified path points to a file, the returned <see cref="T:MediaBrowser.Model.IO.FileSystemMetadata"/> object's
            <see cref="P:MediaBrowser.Model.IO.FileSystemMetadata.IsDirectory"/> property will be set to true and the <see cref="P:MediaBrowser.Model.IO.FileSystemMetadata.Exists"/> property will be set to false.</para>
            <para>For automatic handling of files <b>and</b> directories, use <see cref="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFileSystemInfo(System.String)"/>.</para></remarks>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetValidFilename(System.String)">
            <summary>
            Takes a filename and removes invalid characters.
            </summary>
            <param name="filename">The filename.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">The filename is null.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetCreationTimeUtc(System.IO.FileSystemInfo)">
            <summary>
            Gets the creation time UTC.
            </summary>
            <param name="info">The info.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetCreationTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetCreationTimeUtc(MediaBrowser.Model.IO.FileSystemMetadata)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetLastWriteTimeUtc(MediaBrowser.Model.IO.FileSystemMetadata)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetLastWriteTimeUtc(System.IO.FileSystemInfo)">
            <summary>
            Gets the creation time UTC.
            </summary>
            <param name="info">The info.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetLastWriteTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.SetHidden(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.SetAttributes(System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.SwapFiles(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.ContainsSubPath(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.AreEqual(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFileNameWithoutExtension(MediaBrowser.Model.IO.FileSystemMetadata)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.IsPathFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.DeleteFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetDrives">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetDirectories(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFiles(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFiles(System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFileSystemEntries(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetDirectoryPaths(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFilePaths(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFilePaths(System.String,System.String[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.GetFileSystemEntryPaths(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.DirectoryExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.IO.ManagedFileSystem.FileExists(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.IStartupOptions">
            <summary>
            Specifies the contract for server startup options.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.IStartupOptions.FFmpegPath">
            <summary>
            Gets the value of the --ffmpeg command line option.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.IStartupOptions.IsService">
            <summary>
            Gets a value indicating whether to run as service by the --service command line option.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.IStartupOptions.PackageName">
            <summary>
            Gets the value of the --package-name command line option.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.IStartupOptions.PublishedServerUrl">
            <summary>
            Gets the value of the --published-server-url command line option.
            </summary>
        </member>
        <member name="T:Emby.Server.Implementations.Library.CoreResolutionIgnoreRule">
            <summary>
            Provides the core resolver ignore rules.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.CoreResolutionIgnoreRule.#ctor(Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.IServerApplicationPaths)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.CoreResolutionIgnoreRule"/> class.
            </summary>
            <param name="namingOptions">The naming options.</param>
            <param name="serverApplicationPaths">The server application paths.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.CoreResolutionIgnoreRule.ShouldIgnore(MediaBrowser.Model.IO.FileSystemMetadata,MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Library.IgnorePatterns">
            <summary>
            Glob patterns for files to ignore.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.IgnorePatterns._patterns">
            <summary>
            Files matching these glob patterns will be ignored.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.IgnorePatterns.ShouldIgnore(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns true if the supplied path should be ignored.
            </summary>
            <param name="path">The path to test.</param>
            <returns>Whether to ignore the path.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.LibraryManager">
            <summary>
            Class LibraryManager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.LibraryManager._rootFolderSyncLock">
            <summary>
            The _root folder sync lock.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.LibraryManager._rootFolder">
            <summary>
            The _root folder.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.#ctor(MediaBrowser.Controller.IServerApplicationHost,Microsoft.Extensions.Logging.ILoggerFactory,MediaBrowser.Model.Tasks.ITaskManager,MediaBrowser.Controller.Library.IUserManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Library.IUserDataManager,System.Lazy{MediaBrowser.Controller.Library.ILibraryMonitor},MediaBrowser.Model.IO.IFileSystem,System.Lazy{MediaBrowser.Controller.Providers.IProviderManager},System.Lazy{MediaBrowser.Controller.Library.IUserViewManager},MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Controller.Persistence.IItemRepository,MediaBrowser.Controller.Drawing.IImageProcessor,Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.LibraryManager" /> class.
            </summary>
            <param name="appHost">The application host.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="taskManager">The task manager.</param>
            <param name="userManager">The user manager.</param>
            <param name="configurationManager">The configuration manager.</param>
            <param name="userDataRepository">The user data repository.</param>
            <param name="libraryMonitorFactory">The library monitor.</param>
            <param name="fileSystem">The file system.</param>
            <param name="providerManagerFactory">The provider manager.</param>
            <param name="userviewManagerFactory">The userview manager.</param>
            <param name="mediaEncoder">The media encoder.</param>
            <param name="itemRepository">The item repository.</param>
            <param name="imageProcessor">The image processor.</param>
            <param name="namingOptions">The naming options.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="E:Emby.Server.Implementations.Library.LibraryManager.ItemAdded">
            <summary>
            Occurs when [item added].
            </summary>
        </member>
        <member name="E:Emby.Server.Implementations.Library.LibraryManager.ItemUpdated">
            <summary>
            Occurs when [item updated].
            </summary>
        </member>
        <member name="E:Emby.Server.Implementations.Library.LibraryManager.ItemRemoved">
            <summary>
            Occurs when [item removed].
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Library.LibraryManager.RootFolder">
            <summary>
            Gets the root folder.
            </summary>
            <value>The root folder.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Library.LibraryManager.PostscanTasks">
            <summary>
            Gets or sets the postscan tasks.
            </summary>
            <value>The postscan tasks.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Library.LibraryManager.IntroProviders">
            <summary>
            Gets or sets the intro providers.
            </summary>
            <value>The intro providers.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Library.LibraryManager.EntityResolutionIgnoreRules">
            <summary>
            Gets or sets the list of entity resolution ignore rules.
            </summary>
            <value>The entity resolution ignore rules.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Library.LibraryManager.EntityResolvers">
            <summary>
            Gets or sets the list of currently registered entity resolvers.
            </summary>
            <value>The entity resolvers enumerable.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Library.LibraryManager.Comparers">
            <summary>
            Gets or sets the comparers.
            </summary>
            <value>The comparers.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Resolvers.IResolverIgnoreRule},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Resolvers.IItemResolver},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IIntroProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Sorting.IBaseItemComparer},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.ILibraryPostScanTask})">
            <summary>
            Adds the parts.
            </summary>
            <param name="rules">The rules.</param>
            <param name="resolvers">The resolvers.</param>
            <param name="introProviders">The intro providers.</param>
            <param name="itemComparers">The item comparers.</param>
            <param name="postscanTasks">The post scan tasks.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.RecordConfigurationValues(MediaBrowser.Model.Configuration.ServerConfiguration)">
            <summary>
            Records the configuration values.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.ConfigurationUpdated(System.Object,System.EventArgs)">
            <summary>
            Configurations the updated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.ResolveItem(MediaBrowser.Controller.Library.ItemResolveArgs,MediaBrowser.Controller.Resolvers.IItemResolver[])">
            <summary>
            Resolves the item.
            </summary>
            <param name="args">The args.</param>
            <param name="resolvers">The resolvers.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.ShouldResolvePathContents(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Determines whether a path should be ignored based on its contents - called after the contents have been read.
            </summary>
            <param name="args">The args.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.CreateRootFolder">
            <summary>
            Creates the root media folder.
            </summary>
            <returns>AggregateFolder.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot create the root folder until plugins have loaded.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.FindByPath(System.String,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetPerson(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetStudio(System.String)">
            <summary>
            Gets the studio.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{Studio}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetGenre(System.String)">
            <summary>
            Gets the genre.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{Genre}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetMusicGenre(System.String)">
            <summary>
            Gets the music genre.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{MusicGenre}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetYear(System.Int32)">
            <summary>
            Gets the year.
            </summary>
            <param name="value">The value.</param>
            <returns>Task{Year}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetArtist(System.String)">
            <summary>
            Gets a Genre.
            </summary>
            <param name="name">The name.</param>
            <returns>Task{Genre}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.ValidatePeopleAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.ValidateMediaLibrary(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Reloads the root media folder.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.ValidateMediaLibraryInternal(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Validates the media library internal.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.RunPostScanTasks(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the post scan tasks.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetVirtualFolders">
            <summary>
            Gets the default view.
            </summary>
            <returns>IEnumerable{VirtualFolderInfo}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetItemById(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetItemById``1(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetItemById``1(System.Guid,System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetItemById``1(System.Guid,Jellyfin.Data.Entities.User)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetIntros(MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the intros.
            </summary>
            <param name="item">The item.</param>
            <param name="user">The user.</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetIntros(MediaBrowser.Controller.Library.IIntroProvider,MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the intros.
            </summary>
            <param name="provider">The provider.</param>
            <param name="item">The item.</param>
            <param name="user">The user.</param>
            <returns>Task&lt;IEnumerable&lt;IntroInfo&gt;&gt;.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.ResolveIntro(MediaBrowser.Controller.Library.IntroInfo)">
            <summary>
            Resolves the intro.
            </summary>
            <param name="info">The info.</param>
            <returns>Video.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.Sort(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.BaseItem},Jellyfin.Data.Entities.User,System.Collections.Generic.IEnumerable{Jellyfin.Data.Enums.ItemSortBy},Jellyfin.Data.Enums.SortOrder)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.Sort(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.BaseItem},Jellyfin.Data.Entities.User,System.Collections.Generic.IEnumerable{System.ValueTuple{Jellyfin.Data.Enums.ItemSortBy,Jellyfin.Data.Enums.SortOrder}})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetComparer(Jellyfin.Data.Enums.ItemSortBy,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the comparer.
            </summary>
            <param name="name">The name.</param>
            <param name="user">The user.</param>
            <returns>IBaseItemComparer.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.CreateItem(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.CreateItems(System.Collections.Generic.IReadOnlyList{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.UpdateImagesAsync(MediaBrowser.Controller.Entities.BaseItem,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.UpdateItemsAsync(System.Collections.Generic.IReadOnlyList{MediaBrowser.Controller.Entities.BaseItem},MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.UpdateItemAsync(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.ReportItemRemoved(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Reports the item removed.
            </summary>
            <param name="item">The item.</param>
            <param name="parent">The parent item.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.RetrieveItem(System.Guid)">
            <summary>
            Retrieves the item.
            </summary>
            <param name="id">The id.</param>
            <returns>BaseItem.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.QueueLibraryScan">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.GetSeasonNumberFromPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.FillMissingEpisodeNumbersFromPath(MediaBrowser.Controller.Entities.TV.Episode,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.LibraryManager.UpdatePeopleAsync(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.List{MediaBrowser.Controller.Entities.PersonInfo},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.MediaSourceManager.GetMediaAttachments(MediaBrowser.Controller.Persistence.MediaAttachmentQuery)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.MediaSourceManager.GetMediaAttachments(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.MediaSourceManager.GetPathProtocol(System.String)">
            <inheritdoc />>
        </member>
        <member name="M:Emby.Server.Implementations.Library.MediaSourceManager.GetLiveStreamInfoByUniqueId(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.MediaSourceManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.MediaSourceManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.MusicManager.GetInstantMixFromArtist(MediaBrowser.Controller.Entities.Audio.MusicArtist,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Dto.DtoOptions)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Library.PathExtensions">
            <summary>
            Class providing extension methods for working with paths.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.PathExtensions.GetAttributeValue(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="str">The STR.</param>
            <param name="attribute">The attrib.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="str" /> or <paramref name="attribute" /> is empty.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Library.PathExtensions.TryReplaceSubPath(System.String,System.String,System.String,System.String@)">
            <summary>
            Replaces a sub path with another sub path and normalizes the final path.
            </summary>
            <param name="path">The original path.</param>
            <param name="subPath">The original sub path.</param>
            <param name="newSubPath">The new sub path.</param>
            <param name="newPath">The result of the sub path replacement.</param>
            <returns>The path after replacing the sub path.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" />, <paramref name="newSubPath" /> or <paramref name="newSubPath" /> is empty.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Library.PathExtensions.Canonicalize(System.String)">
            <summary>
            Retrieves the full resolved path and normalizes path separators to the <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
            <param name="path">The path to canonicalize.</param>
            <returns>The fully expanded, normalized path.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.PathExtensions.NormalizePath(System.String)">
            <summary>
            Normalizes the path's directory separator character to the currently defined <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>The normalized path string or <see langword="null"/> if the input path is null or empty.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.PathExtensions.NormalizePath(System.String,System.Char@)">
            <summary>
            Normalizes the path's directory separator character.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="separator">The separator character the path now uses or <see langword="null"/>.</param>
            <returns>The normalized path string or <see langword="null"/> if the input path is null or empty.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.PathExtensions.NormalizePath(System.String,System.Char)">
            <summary>
            Normalizes the path's directory separator character to the specified character.
            </summary>
            <param name="path">The path to normalize.</param>
            <param name="newSeparator">The replacement directory separator character. Must be a valid directory separator.</param>
            <returns>The normalized path.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the new separator character is not a directory separator.</exception>
        </member>
        <member name="T:Emby.Server.Implementations.Library.ResolverHelper">
            <summary>
            Class ResolverHelper.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.ResolverHelper.SetInitialItemValues(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.Folder,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Sets the initial item values.
            </summary>
            <param name="item">The item.</param>
            <param name="parent">The parent.</param>
            <param name="libraryManager">The library manager.</param>
            <param name="directoryService">The directory service.</param>
            <returns>True if initializing was successful.</returns>
            <exception cref="T:System.ArgumentException">Item must have a path.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Library.ResolverHelper.SetInitialItemValues(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemResolveArgs,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Sets the initial item values.
            </summary>
            <param name="item">The item.</param>
            <param name="args">The args.</param>
            <param name="fileSystem">The file system.</param>
            <param name="libraryManager">The library manager.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.ResolverHelper.EnsureName(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.IO.FileSystemMetadata)">
            <summary>
            Ensures the name.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.ResolverHelper.EnsureDates(MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Ensures DateCreated and DateModified have values.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="item">The item.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.Audio.AudioResolver">
            <summary>
            Class AudioResolver.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Library.Resolvers.Audio.AudioResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Audio.AudioResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Entities.Audio.Audio.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver">
            <summary>
            The music album resolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver},Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="namingOptions">The naming options.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="P:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>MusicAlbum.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver.IsMusicAlbum(System.String,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Determine if the supplied file data points to a music album.
            </summary>
            <param name="path">The path to check.</param>
            <param name="directoryService">The directory service.</param>
            <returns><c>true</c> if the provided path points to a music album; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver.IsMusicAlbum(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Determine if the supplied resolve args should be considered a music album.
            </summary>
            <param name="args">The args.</param>
            <returns><c>true</c> if [is music album] [the specified args]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver.ContainsMusic(System.Collections.Generic.ICollection{MediaBrowser.Model.IO.FileSystemMetadata},System.Boolean,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Determine if the supplied list contains what we should consider music.
            </summary>
            <returns><c>true</c> if the provided path list contains music; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.Audio.MusicArtistResolver">
            <summary>
            The music artist resolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Audio.MusicArtistResolver.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver},Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.Audio.MusicArtistResolver"/> class.
            </summary>
            <param name="logger">Instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.Audio.MusicAlbumResolver"/> interface.</param>
            <param name="namingOptions">The <see cref="T:Emby.Naming.Common.NamingOptions"/>.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="P:Emby.Server.Implementations.Library.Resolvers.Audio.MusicArtistResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Audio.MusicArtistResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified resolver arguments.
            </summary>
            <param name="args">The resolver arguments.</param>
            <returns>A <see cref="T:MediaBrowser.Controller.Entities.Audio.MusicArtist"/>.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.BaseVideoResolver`1">
            <summary>
            Resolves a Path into a Video or Video subclass.
            </summary>
            <typeparam name="T">The type of item to resolve.</typeparam>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.BaseVideoResolver`1.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>`0.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.BaseVideoResolver`1.ResolveVideo``1(MediaBrowser.Controller.Library.ItemResolveArgs,System.Boolean)">
            <summary>
            Resolves the video.
            </summary>
            <typeparam name="TVideoType">The type of the T video type.</typeparam>
            <param name="args">The args.</param>
            <param name="parseName">if set to <c>true</c> [parse name].</param>
            <returns>``0.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.BaseVideoResolver`1.IsDvdDirectory(System.String,System.String,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Determines whether [is DVD directory] [the specified directory name].
            </summary>
            <param name="fullPath">The full path of the directory.</param>
            <param name="directoryName">The name of the directory.</param>
            <param name="directoryService">The directory service.</param>
            <returns><c>true</c> if the provided directory is a DVD directory, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.BaseVideoResolver`1.IsDvdFile(System.String)">
            <summary>
            Determines whether [is DVD file] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [is DVD file] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.BaseVideoResolver`1.IsBluRayDirectory(System.String)">
            <summary>
            Determines whether [is bluray directory] [the specified directory name].
            </summary>
            <param name="directoryName">The directory name.</param>
            <returns>Whether the directory is a bluray directory.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.ExtraResolver">
            <summary>
            Resolves a Path into a Video or Video subclass.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.ExtraResolver.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Resolvers.ExtraResolver},Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.ExtraResolver"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="namingOptions">An instance of <see cref="T:Emby.Naming.Common.NamingOptions"/>.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.ExtraResolver.GetResolversForExtraType(MediaBrowser.Model.Entities.ExtraType)">
            <summary>
            Gets the resolvers for the extra type.
            </summary>
            <param name="extraType">The extra type.</param>
            <returns>The resolvers for the extra type.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.FolderResolver">
            <summary>
            Class FolderResolver.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Library.Resolvers.FolderResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.FolderResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Folder.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.GenericFolderResolver`1">
            <summary>
            Class FolderResolver.
            </summary>
            <typeparam name="TItemType">The type of the T item type.</typeparam>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.GenericFolderResolver`1.SetInitialItemValues(`0,MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Sets the initial item values.
            </summary>
            <param name="item">The item.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.GenericVideoResolver`1">
            <summary>
            Resolves a Path into an instance of the <see cref="T:MediaBrowser.Controller.Entities.Video"/> class.
            </summary>
            <typeparam name="T">The type of item to resolve.</typeparam>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.GenericVideoResolver`1.#ctor(Microsoft.Extensions.Logging.ILogger,Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.GenericVideoResolver`1"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="namingOptions">The naming options.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.Movies.BoxSetResolver">
            <summary>
            Class BoxSetResolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.BoxSetResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>BoxSet.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.BoxSetResolver.SetInitialItemValues(MediaBrowser.Controller.Entities.Movies.BoxSet,MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Sets the initial item values.
            </summary>
            <param name="item">The item.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.BoxSetResolver.SetProviderIdFromPath(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Sets the provider id from path.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver">
            <summary>
            Class MovieResolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.#ctor(MediaBrowser.Controller.Drawing.IImageProcessor,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver},Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver"/> class.
            </summary>
            <param name="imageProcessor">The image processor.</param>
            <param name="logger">The logger.</param>
            <param name="namingOptions">The naming options.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="P:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.IsIgnoredRegex">
            <remarks>
            Pattern:<br/>
            <code>\\bsample\\b</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at a word boundary.<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Mm].<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Ll].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match if at a word boundary.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.ResolveMultiple(MediaBrowser.Controller.Entities.Folder,System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},System.Nullable{Jellyfin.Data.Enums.CollectionType},MediaBrowser.Controller.Providers.IDirectoryService)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Video.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.SetInitialItemValues(MediaBrowser.Controller.Entities.Video,MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Sets the initial item values.
            </summary>
            <param name="item">The item.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.SetProviderIdsFromPath(MediaBrowser.Controller.Entities.Video)">
            <summary>
            Sets the provider id from path.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.FindMovie``1(MediaBrowser.Controller.Library.ItemResolveArgs,System.String,MediaBrowser.Controller.Entities.Folder,System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},MediaBrowser.Controller.Providers.IDirectoryService,System.Nullable{Jellyfin.Data.Enums.CollectionType},System.Boolean)">
            <summary>
            Finds a movie based on a child file system entries.
            </summary>
            <returns>Movie.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.Movies.MovieResolver.GetMultiDiscMovie``1(System.Collections.Generic.List{MediaBrowser.Model.IO.FileSystemMetadata},MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Gets the multi disc movie.
            </summary>
            <param name="multiDiscFolders">The folders.</param>
            <param name="directoryService">The directory service.</param>
            <returns>``0.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.PhotoAlbumResolver">
            <summary>
            Class PhotoAlbumResolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.PhotoAlbumResolver.#ctor(MediaBrowser.Controller.Drawing.IImageProcessor,Emby.Naming.Common.NamingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.PhotoAlbumResolver"/> class.
            </summary>
            <param name="imageProcessor">The image processor.</param>
            <param name="namingOptions">The naming options.</param>
        </member>
        <member name="P:Emby.Server.Implementations.Library.Resolvers.PhotoAlbumResolver.Priority">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.PhotoAlbumResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Trailer.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.PhotoResolver">
            <summary>
            Class PhotoResolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.PhotoResolver.#ctor(MediaBrowser.Controller.Drawing.IImageProcessor,Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.PhotoResolver"/> class.
            </summary>
            <param name="imageProcessor">The image processor.</param>
            <param name="namingOptions">The naming options.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.PhotoResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Trailer.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.PlaylistResolver">
            <summary>
            <see cref="T:MediaBrowser.Controller.Resolvers.IItemResolver"/> for <see cref="T:MediaBrowser.Controller.Playlists.Playlist"/> library items.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.PlaylistResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <inheritdoc/>
        </member>
        <member name="P:Emby.Server.Implementations.Library.Resolvers.SpecialFolderResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.SpecialFolderResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Folder.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.TV.EpisodeResolver">
            <summary>
            Class EpisodeResolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.EpisodeResolver.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Resolvers.TV.EpisodeResolver},Emby.Naming.Common.NamingOptions,MediaBrowser.Controller.Providers.IDirectoryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.TV.EpisodeResolver"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="namingOptions">The naming options.</param>
            <param name="directoryService">The directory service.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.EpisodeResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Episode.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.TV.SeasonResolver">
            <summary>
            Class SeasonResolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.SeasonResolver.#ctor(Emby.Naming.Common.NamingOptions,MediaBrowser.Model.Globalization.ILocalizationManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Resolvers.TV.SeasonResolver})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.TV.SeasonResolver"/> class.
            </summary>
            <param name="namingOptions">The naming options.</param>
            <param name="localization">The localization.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.SeasonResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Season.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver">
            <summary>
            Class SeriesResolver.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver},Emby.Naming.Common.NamingOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="namingOptions">The naming options.</param>
        </member>
        <member name="P:Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver.Priority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver.Resolve(MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Resolves the specified args.
            </summary>
            <param name="args">The args.</param>
            <returns>Series.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver.IsSeasonFolder(System.String,System.Boolean)">
            <summary>
            Determines whether [is season folder] [the specified path].
            </summary>
            <param name="path">The path.</param>
            <param name="isTvContentType">if set to <c>true</c> [is tv content type].</param>
            <returns><c>true</c> if [is season folder] [the specified path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver.SetInitialItemValues(MediaBrowser.Controller.Entities.TV.Series,MediaBrowser.Controller.Library.ItemResolveArgs)">
            <summary>
            Sets the initial item values.
            </summary>
            <param name="item">The item.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Resolvers.TV.SeriesResolver.SetProviderIdFromPath(MediaBrowser.Controller.Entities.TV.Series,System.String)">
            <summary>
            Sets the provider id from path.
            </summary>
            <param name="item">The item.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.SearchEngine.GetSearchHints(MediaBrowser.Model.Search.SearchQuery,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the search hints.
            </summary>
            <param name="query">The query.</param>
            <param name="user">The user.</param>
            <returns>IEnumerable{SearchHintResult}.</returns>
            <exception cref="T:System.ArgumentException"><c>query.SearchTerm</c> is <c>null</c> or empty.</exception>
        </member>
        <member name="T:Emby.Server.Implementations.Library.SplashscreenPostScanTask">
            <summary>
            The splashscreen post scan task.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.SplashscreenPostScanTask.#ctor(MediaBrowser.Controller.Persistence.IItemRepository,MediaBrowser.Controller.Drawing.IImageEncoder,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.SplashscreenPostScanTask})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.SplashscreenPostScanTask"/> class.
            </summary>
            <param name="itemRepository">Instance of the <see cref="T:MediaBrowser.Controller.Persistence.IItemRepository"/> interface.</param>
            <param name="imageEncoder">Instance of the <see cref="T:MediaBrowser.Controller.Drawing.IImageEncoder"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.SplashscreenPostScanTask.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Library.UserDataManager">
            <summary>
            Class UserDataManager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Library.IUserManager,MediaBrowser.Controller.Persistence.IUserDataRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.UserDataManager"/> class.
            </summary>
            <param name="config">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
            <param name="userManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.IUserManager"/> interface.</param>
            <param name="repository">Instance of the <see cref="T:MediaBrowser.Controller.Persistence.IUserDataRepository"/> interface.</param>
        </member>
        <member name="E:Emby.Server.Implementations.Library.UserDataManager.UserDataSaved">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.SaveUserData(Jellyfin.Data.Entities.User,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.UserItemData,MediaBrowser.Model.Entities.UserDataSaveReason,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.SaveUserData(Jellyfin.Data.Entities.User,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Dto.UpdateUserItemDataDto,MediaBrowser.Model.Entities.UserDataSaveReason)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.GetCacheKey(System.Int64,System.Guid)">
            <summary>
            Gets the internal key.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.GetUserData(Jellyfin.Data.Entities.User,MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.GetUserDataDto(MediaBrowser.Controller.Entities.BaseItem,Jellyfin.Data.Entities.User)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.GetUserDataDto(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Dto.BaseItemDto,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Dto.DtoOptions)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.GetUserItemDataDto(MediaBrowser.Controller.Entities.UserItemData)">
            <summary>
            Converts a UserItemData to a DTOUserItemData.
            </summary>
            <param name="data">The data.</param>
            <returns>DtoUserItemData.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Library.UserDataManager.UpdatePlayState(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.UserItemData,System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.ArtistsPostScanTask">
            <summary>
            Class ArtistsPostScanTask.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.ArtistsPostScanTask._libraryManager">
            <summary>
            The _library manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.ArtistsPostScanTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.ArtistsValidator},MediaBrowser.Controller.Persistence.IItemRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.ArtistsPostScanTask" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="itemRepo">The item repository.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.ArtistsPostScanTask.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.ArtistsValidator">
            <summary>
            Class ArtistsValidator.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.ArtistsValidator._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.ArtistsValidator._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.ArtistsValidator.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.ArtistsValidator},MediaBrowser.Controller.Persistence.IItemRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.ArtistsValidator" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="itemRepo">The item repository.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.ArtistsValidator.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.CollectionPostScanTask">
            <summary>
            Class CollectionPostScanTask.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.CollectionPostScanTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Collections.ICollectionManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.CollectionPostScanTask})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.CollectionPostScanTask" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="collectionManager">The collection manager.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.CollectionPostScanTask.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.GenresPostScanTask">
            <summary>
            Class GenresPostScanTask.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.GenresPostScanTask._libraryManager">
            <summary>
            The _library manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.GenresPostScanTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.GenresValidator},MediaBrowser.Controller.Persistence.IItemRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.GenresPostScanTask" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="itemRepo">The item repository.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.GenresPostScanTask.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.GenresValidator">
            <summary>
            Class GenresValidator.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.GenresValidator._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.GenresValidator._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.GenresValidator.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.GenresValidator},MediaBrowser.Controller.Persistence.IItemRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.GenresValidator"/> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="itemRepo">The item repository.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.GenresValidator.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.MusicGenresPostScanTask">
            <summary>
            Class MusicGenresPostScanTask.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.MusicGenresPostScanTask._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.MusicGenresPostScanTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.MusicGenresValidator},MediaBrowser.Controller.Persistence.IItemRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.MusicGenresPostScanTask" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="itemRepo">The item repository.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.MusicGenresPostScanTask.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.MusicGenresValidator">
            <summary>
            Class MusicGenresValidator.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.MusicGenresValidator._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.MusicGenresValidator._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.MusicGenresValidator.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.MusicGenresValidator},MediaBrowser.Controller.Persistence.IItemRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.MusicGenresValidator" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="itemRepo">The item repository.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.MusicGenresValidator.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.PeopleValidator">
            <summary>
            Class PeopleValidator.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.PeopleValidator._libraryManager">
            <summary>
            The _library manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.PeopleValidator._logger">
            <summary>
            The _logger.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.PeopleValidator.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger,MediaBrowser.Model.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.PeopleValidator" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.PeopleValidator.ValidatePeople(System.Threading.CancellationToken,System.IProgress{System.Double})">
            <summary>
            Validates the people.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="progress">The progress.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.StudiosPostScanTask">
            <summary>
            Class MusicGenresPostScanTask.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.StudiosPostScanTask._libraryManager">
            <summary>
            The _library manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.StudiosPostScanTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.StudiosValidator},MediaBrowser.Controller.Persistence.IItemRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.StudiosPostScanTask" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="itemRepo">The item repository.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.StudiosPostScanTask.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Library.Validators.StudiosValidator">
            <summary>
            Class StudiosValidator.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.StudiosValidator._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Library.Validators.StudiosValidator._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.StudiosValidator.#ctor(MediaBrowser.Controller.Library.ILibraryManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Library.Validators.StudiosValidator},MediaBrowser.Controller.Persistence.IItemRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Library.Validators.StudiosValidator" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="logger">The logger.</param>
            <param name="itemRepo">The item repository.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Library.Validators.StudiosValidator.Run(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Runs the specified progress.
            </summary>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Localization.LocalizationManager">
            <summary>
            Class LocalizationManager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Localization.LocalizationManager})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Localization.LocalizationManager" /> class.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.LoadAll">
            <summary>
            Loads all resources into memory.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task" />.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.GetCultures">
            <summary>
            Gets the cultures.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.FindLanguageInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.GetCountries">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.GetParentalRatings">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.GetParentalRatingsDictionary(System.String)">
            <summary>
            Gets the parental ratings dictionary.
            </summary>
            <param name="countryCode">The optional two letter ISO language string.</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.GetRatingLevel(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.GetLocalizedString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.GetLocalizedString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Localization.LocalizationManager.GetLocalizationOptions">
            <inheritdoc />
        </member>
        <member name="F:Emby.Server.Implementations.MediaEncoder.EncodingManager._firstChapterTicks">
            <summary>
            The first chapter ticks.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.MediaEncoder.EncodingManager.GetChapterImagesPath(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the chapter images data path.
            </summary>
            <value>The chapter images data path.</value>
        </member>
        <member name="M:Emby.Server.Implementations.MediaEncoder.EncodingManager.IsEligibleForChapterImageExtraction(MediaBrowser.Controller.Entities.Video,MediaBrowser.Model.Configuration.LibraryOptions)">
            <summary>
            Determines whether [is eligible for chapter image extraction] [the specified video].
            </summary>
            <param name="video">The video.</param>
            <param name="libraryOptions">The library options for the video.</param>
            <returns><c>true</c> if [is eligible for chapter image extraction] [the specified video]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Playlists.PlaylistManager.SavePlaylistFile(MediaBrowser.Controller.Playlists.Playlist)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Playlists.PlaylistManager.GetPlaylistsFolder">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Playlists.PlaylistManager.GetPlaylistsFolder(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Playlists.PlaylistManager.RemovePlaylistsAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Plugins.PluginLoadContext">
            <summary>
            A custom <see cref="T:System.Runtime.Loader.AssemblyLoadContext"/> for loading Jellyfin plugins.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginLoadContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Plugins.PluginLoadContext"/> class.
            </summary>
            <param name="path">The path of the plugin assembly.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginLoadContext.Load(System.Reflection.AssemblyName)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Plugins.PluginManager">
            <summary>
            Defines the <see cref="T:Emby.Server.Implementations.Plugins.PluginManager" />.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Plugins.PluginManager},MediaBrowser.Controller.IServerApplicationHost,MediaBrowser.Model.Configuration.ServerConfiguration,System.String,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Plugins.PluginManager"/> class.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/>.</param>
            <param name="appHost">The <see cref="T:MediaBrowser.Controller.IServerApplicationHost"/>.</param>
            <param name="config">The <see cref="T:MediaBrowser.Model.Configuration.ServerConfiguration"/>.</param>
            <param name="pluginsPath">The plugin path.</param>
            <param name="appVersion">The application version.</param>
        </member>
        <member name="P:Emby.Server.Implementations.Plugins.PluginManager.Plugins">
            <summary>
            Gets the Plugins.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.LoadAssemblies">
            <summary>
            Returns all the assemblies.
            </summary>
            <returns>An IEnumerable{Assembly}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.CreatePlugins">
            <summary>
            Creates all the plugin instances.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the plugin's services with the DI.
            Note: DI is not yet instantiated yet.
            </summary>
            <param name="serviceCollection">A <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/> instance.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.ImportPluginFrom(System.String)">
            <summary>
            Imports a plugin manifest from <paramref name="folder"/>.
            </summary>
            <param name="folder">Folder of the plugin.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.RemovePlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Removes the plugin reference '<paramref name="plugin"/>.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>Outcome of the operation.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.GetPlugin(System.Guid,System.Version)">
            <summary>
            Attempts to find the plugin with and id of <paramref name="id"/>.
            </summary>
            <param name="id">The <see cref="T:System.Guid"/> of plugin.</param>
            <param name="version">Optional <see cref="T:System.Version"/> of the plugin to locate.</param>
            <returns>A <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> if located, or null if not.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.EnablePlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Enables the plugin, disabling all other versions.
            </summary>
            <param name="plugin">The <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> of the plug to disable.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.DisablePlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Disable the plugin.
            </summary>
            <param name="plugin">The <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> of the plug to disable.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.FailPlugin(System.Reflection.Assembly)">
            <summary>
            Disable the plugin.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> of the plug to disable.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.SaveManifest(MediaBrowser.Common.Plugins.PluginManifest,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.PopulateManifest(MediaBrowser.Model.Updates.PackageInfo,System.Version,System.String,MediaBrowser.Model.Plugins.PluginStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.ReconcileManifest(MediaBrowser.Common.Plugins.PluginManifest,System.String)">
            <summary>
            Reconciles the manifest against any properties that exist locally in a pre-packaged meta.json found at the path.
            If no file is found, no reconciliation occurs.
            </summary>
            <param name="manifest">The <see cref="T:MediaBrowser.Common.Plugins.PluginManifest"/> to reconcile against.</param>
            <param name="path">The plugin path.</param>
            <returns>The reconciled <see cref="T:MediaBrowser.Common.Plugins.PluginManifest"/>.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.ChangePluginState(MediaBrowser.Common.Plugins.LocalPlugin,MediaBrowser.Model.Plugins.PluginStatus)">
            <summary>
            Changes a plugin's load status.
            </summary>
            <param name="plugin">The <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> instance.</param>
            <param name="state">The <see cref="T:MediaBrowser.Model.Plugins.PluginStatus"/> of the plugin.</param>
            <returns>Success of the task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.GetPluginByAssembly(System.Reflection.Assembly)">
            <summary>
            Finds the plugin record using the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> being sought.</param>
            <returns>The matching record, or null if not found.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.CreatePluginInstance(System.Type)">
            <summary>
            Creates the instance safe.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.DeletePlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Attempts to delete a plugin.
            </summary>
            <param name="plugin">A <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> instance to delete.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.DiscoverPlugins">
            <summary>
            Gets the list of local plugins.
            </summary>
            <returns>Enumerable of local plugins.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.TryGetPluginDlls(MediaBrowser.Common.Plugins.LocalPlugin,System.Collections.Generic.IReadOnlyList{System.String}@)">
            <summary>
            Attempts to retrieve valid DLLs from the plugin path. This method will consider the assembly whitelist
            from the manifest.
            </summary>
            <remarks>
            Loading DLLs from externally supplied paths introduces a path traversal risk. This method
            uses a safelisting tactic of considering DLLs from the plugin directory and only using
            the plugin's canonicalized assembly whitelist for comparison. See
            <see href="https://owasp.org/www-community/attacks/Path_Traversal"/> for more details.
            </remarks>
            <param name="plugin">The plugin.</param>
            <param name="whitelistedDlls">The whitelisted DLLs. If the method returns <see langword="false"/>, this will be empty.</param>
            <returns>
            <see langword="true"/> if all assemblies listed in the manifest were available in the plugin directory.
            <see langword="false"/> if any assemblies were invalid or missing from the plugin directory.
            </returns>
            <exception cref="T:System.ArgumentNullException">If the <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> is null.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Plugins.PluginManager.ProcessAlternative(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Changes the status of the other versions of the plugin to "Superceded".
            </summary>
            <param name="plugin">The <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> that's master.</param>
        </member>
        <member name="T:Emby.Server.Implementations.QuickConnect.QuickConnectManager">
            <summary>
            Quick connect implementation.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.QuickConnect.QuickConnectManager.CodeLength">
            <summary>
            The length of user facing codes.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.QuickConnect.QuickConnectManager.Timeout">
            <summary>
            The time (in minutes) that the quick connect token is valid.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.QuickConnect.QuickConnectManager.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.QuickConnect.QuickConnectManager},MediaBrowser.Controller.Session.ISessionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.QuickConnect.QuickConnectManager"/> class.
            Should only be called at server startup when a singleton is created.
            </summary>
            <param name="config">Configuration.</param>
            <param name="logger">Logger.</param>
            <param name="sessionManager">Session Manager.</param>
        </member>
        <member name="P:Emby.Server.Implementations.QuickConnect.QuickConnectManager.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.QuickConnect.QuickConnectManager.AssertActive">
            <summary>
            Assert that quick connect is currently active and throws an exception if it is not.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.QuickConnect.QuickConnectManager.TryConnect(MediaBrowser.Controller.Net.AuthorizationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.QuickConnect.QuickConnectManager.CheckRequestStatus(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.QuickConnect.QuickConnectManager.GenerateCode">
            <summary>
            Generates a short code to display to the user to uniquely identify this request.
            </summary>
            <returns>A short, unique alphanumeric string.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.QuickConnect.QuickConnectManager.AuthorizeRequest(System.Guid,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.QuickConnect.QuickConnectManager.GetAuthorizedRequest(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.QuickConnect.QuickConnectManager.ExpireRequests(System.Boolean)">
            <summary>
            Expire quick connect requests that are over the time limit. If <paramref name="expireAll"/> is true, all requests are unconditionally expired.
            </summary>
            <param name="expireAll">If true, all requests will be expired.</param>
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker">
            <summary>
            Class ScheduledTaskWorker.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.#ctor(MediaBrowser.Model.Tasks.IScheduledTask,MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Model.Tasks.ITaskManager,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker" /> class.
            </summary>
            <param name="scheduledTask">The scheduled task.</param>
            <param name="applicationPaths">The application paths.</param>
            <param name="taskManager">The task manager.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">
            scheduledTask
            or
            applicationPaths
            or
            taskManager
            or
            jsonSerializer
            or
            logger.
            </exception>
        </member>
        <member name="E:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.TaskProgress">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.ScheduledTask">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.LastExecutionResult">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.CurrentCancellationTokenSource">
            <summary>
            Gets or sets the current cancellation token.
            </summary>
            <value>The current cancellation token source.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.CurrentExecutionStartTime">
            <summary>
            Gets or sets the current execution start time.
            </summary>
            <value>The current execution start time.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.State">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.CurrentProgress">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.InternalTriggers">
            <summary>
            Gets or sets the triggers that define when the task will run.
            </summary>
            <value>The triggers.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Triggers">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Id">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.ReloadTriggerEvents">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.ReloadTriggerEvents(System.Boolean)">
            <summary>
            Reloads the trigger events.
            </summary>
            <param name="isApplicationStartup">if set to <c>true</c> [is application startup].</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.OnTriggerTriggered(System.Object,System.EventArgs)">
            <summary>
            Handles the Triggered event of the trigger control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Execute(MediaBrowser.Model.Tasks.TaskOptions)">
            <summary>
            Executes the task.
            </summary>
            <param name="options">Task options.</param>
            <returns>Task.</returns>
            <exception cref="T:System.InvalidOperationException">Cannot execute a Task that is already running.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.OnProgressChanged(System.Object,System.Double)">
            <summary>
            Progress_s the progress changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Cancel">
            <summary>
            Stops the task if it is currently executing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot cancel a Task unless it is in the Running state.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.CancelIfRunning">
            <summary>
            Cancels if running.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.GetScheduledTasksConfigurationDirectory">
            <summary>
            Gets the scheduled tasks configuration directory.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.GetScheduledTasksDataDirectory">
            <summary>
            Gets the scheduled tasks data directory.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.GetHistoryFilePath">
            <summary>
            Gets the history file path.
            </summary>
            <value>The history file path.</value>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.GetConfigurationFilePath">
            <summary>
            Gets the configuration file path.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.LoadTriggers">
            <summary>
            Loads the triggers.
            </summary>
            <returns>IEnumerable{BaseTaskTrigger}.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.SaveTriggers(MediaBrowser.Model.Tasks.TaskTriggerInfo[])">
            <summary>
            Saves the triggers.
            </summary>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.OnTaskCompleted(System.DateTime,System.DateTime,MediaBrowser.Model.Tasks.TaskCompletionStatus,System.Exception)">
            <summary>
            Called when [task completed].
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="status">The status.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.GetTrigger(MediaBrowser.Model.Tasks.TaskTriggerInfo)">
            <summary>
            Converts a TaskTriggerInfo into a concrete BaseTaskTrigger.
            </summary>
            <param name="info">The info.</param>
            <returns>BaseTaskTrigger.</returns>
            <exception cref="T:System.ArgumentException">Invalid trigger type:  + info.Type.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.ScheduledTaskWorker.DisposeTriggers">
            <summary>
            Disposes each trigger.
            </summary>
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.TaskManager">
            <summary>
            Class TaskManager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.ScheduledTasks.TaskManager._taskQueue">
            <summary>
            The _task queue.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.ScheduledTasks.TaskManager})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.TaskManager" /> class.
            </summary>
            <param name="applicationPaths">The application paths.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="E:Emby.Server.Implementations.ScheduledTasks.TaskManager.TaskExecuting">
            <inheritdoc />
        </member>
        <member name="E:Emby.Server.Implementations.ScheduledTasks.TaskManager.TaskCompleted">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.TaskManager.ScheduledTasks">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.CancelIfRunningAndQueue``1(MediaBrowser.Model.Tasks.TaskOptions)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.CancelIfRunningAndQueue``1">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.CancelIfRunning``1">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.QueueScheduledTask``1(MediaBrowser.Model.Tasks.TaskOptions)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.QueueScheduledTask``1">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.QueueIfNotRunning``1">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.Execute``1">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.QueueScheduledTask(MediaBrowser.Model.Tasks.IScheduledTask,MediaBrowser.Model.Tasks.TaskOptions)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.QueueScheduledTask(MediaBrowser.Model.Tasks.IScheduledTaskWorker,MediaBrowser.Model.Tasks.TaskOptions)">
            <summary>
            Queues the scheduled task.
            </summary>
            <param name="task">The task.</param>
            <param name="options">The task options.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.AddTasks(System.Collections.Generic.IEnumerable{MediaBrowser.Model.Tasks.IScheduledTask})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.Cancel(MediaBrowser.Model.Tasks.IScheduledTaskWorker)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.Execute(MediaBrowser.Model.Tasks.IScheduledTaskWorker,MediaBrowser.Model.Tasks.TaskOptions)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.OnTaskExecuting(MediaBrowser.Model.Tasks.IScheduledTaskWorker)">
            <summary>
            Called when [task executing].
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.OnTaskCompleted(MediaBrowser.Model.Tasks.IScheduledTaskWorker,MediaBrowser.Model.Tasks.TaskResult)">
            <summary>
            Called when [task completed].
            </summary>
            <param name="task">The task.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.TaskManager.ExecuteQueuedTasks">
            <summary>
            Executes the queued tasks.
            </summary>
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask">
            <summary>
            The audio normalization task.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask.#ctor(MediaBrowser.Controller.Persistence.IItemRepository,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.MediaEncoding.IMediaEncoder,MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Model.Globalization.ILocalizationManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask"/> class.
            </summary>
            <param name="itemRepository">Instance of the <see cref="T:MediaBrowser.Controller.Persistence.IItemRepository"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="mediaEncoder">Instance of the <see cref="T:MediaBrowser.Controller.MediaEncoding.IMediaEncoder"/> interface.</param>
            <param name="applicationPaths">Instance of the <see cref="T:MediaBrowser.Common.Configuration.IApplicationPaths"/> interface.</param>
            <param name="localizationManager">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask.Key">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask.LUFSRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\s+I:\\s+(.*?)\\s+LUFS</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a whitespace character atomically at least once.<br/>
            ○ Match the string "I:".<br/>
            ○ Match a whitespace character greedily at least once.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character other than '\n' lazily any number of times.<br/>
            ○ Match a whitespace character atomically at least once.<br/>
            ○ Match the string "LUFS".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.AudioNormalizationTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask">
            <summary>
            Class ChapterImagesTask.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask},MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Persistence.IItemRepository,MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Controller.MediaEncoding.IEncodingManager,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask" /> class.
            </summary>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface.</param>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="itemRepo">Instance of the <see cref="T:MediaBrowser.Controller.Persistence.IItemRepository"/> interface.</param>
            <param name="appPaths">Instance of the <see cref="T:MediaBrowser.Common.Configuration.IApplicationPaths"/> interface.</param>
            <param name="encodingManager">Instance of the <see cref="T:MediaBrowser.Controller.MediaEncoding.IEncodingManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask.Key">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.ChapterImagesTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask">
            <summary>
            Deletes old activity log entries.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.#ctor(MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Model.Activity.IActivityManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask"/> class.
            </summary>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
            <param name="activityManager">Instance of the <see cref="T:MediaBrowser.Model.Activity.IActivityManager"/> interface.</param>
            <param name="serverConfigurationManager">Instance of the <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.Key">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.IsLogged">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanActivityLogTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask">
            <summary>
            Deletes path references from collections and playlists that no longer exists.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask.#ctor(MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.Collections.ICollectionManager,MediaBrowser.Controller.Playlists.IPlaylistManager,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask},MediaBrowser.Controller.Providers.IProviderManager,MediaBrowser.Model.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask"/> class.
            </summary>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
            <param name="collectionManager">Instance of the <see cref="T:MediaBrowser.Controller.Collections.ICollectionManager"/> interface.</param>
            <param name="playlistManager">Instance of the <see cref="T:MediaBrowser.Controller.Playlists.IPlaylistManager"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface.</param>
            <param name="providerManager">Instance of the <see cref="T:MediaBrowser.Controller.Providers.IProviderManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask.Key">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask.Category">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.CleanupCollectionAndPlaylistPathsTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask">
            <summary>
            Deletes old cache files.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask._applicationPaths">
            <summary>
            Gets or sets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask},MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask" /> class.
            </summary>
            <param name="appPaths">Instance of the <see cref="T:MediaBrowser.Common.Configuration.IApplicationPaths"/> interface.</param>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.Key">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.IsLogged">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteCacheFileTask.DeleteCacheFilesFromDirectory(System.String,System.DateTime,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Deletes the cache files from directory with a last write time less than a given date.
            </summary>
            <param name="directory">The directory.</param>
            <param name="minDateModified">The min date modified.</param>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The task cancellation token.</param>
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask">
            <summary>
            Deletes old log files.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.#ctor(MediaBrowser.Common.Configuration.IConfigurationManager,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask" /> class.
            </summary>
            <param name="configurationManager">Instance of the <see cref="T:MediaBrowser.Common.Configuration.IConfigurationManager"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.Key">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.IsLogged">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteLogFileTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask">
            <summary>
            Deletes all transcoding temp files.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask},MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Common.Configuration.IConfigurationManager,MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask"/> class.
            </summary>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="fileSystem">Instance of the <see cref="T:MediaBrowser.Model.IO.IFileSystem"/> interface.</param>
            <param name="configurationManager">Instance of the <see cref="T:MediaBrowser.Common.Configuration.IConfigurationManager"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.Key">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.IsLogged">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.DeleteTranscodeFileTask.DeleteTempFilesFromDirectory(System.String,System.DateTime,System.IProgress{System.Double},System.Threading.CancellationToken)">
            <summary>
            Deletes the transcoded temp files from directory with a last write time less than a given date.
            </summary>
            <param name="directory">The directory.</param>
            <param name="minDateModified">The min date modified.</param>
            <param name="progress">The progress.</param>
            <param name="cancellationToken">The task cancellation token.</param>
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask">
            <summary>
            Task to obtain media segments.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Model.Globalization.ILocalizationManager,MediaBrowser.Controller.IMediaSegmentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask" /> class.
            </summary>
            <param name="libraryManager">The library manager.</param>
            <param name="localization">The localization manager.</param>
            <param name="mediaSegmentManager">The segment manager.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask.Name">
            <inheritdoc/>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask.Description">
            <inheritdoc/>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask.Category">
            <inheritdoc/>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask.Key">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.MediaSegmentExtractionTask.GetDefaultTriggers">
            <inheritdoc/>
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask">
            <summary>
            Optimizes Jellyfin's database by issuing a VACUUM command.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask},MediaBrowser.Model.Globalization.ILocalizationManager,Microsoft.EntityFrameworkCore.IDbContextFactory{Jellyfin.Server.Implementations.JellyfinDbContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask" /> class.
            </summary>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
            <param name="provider">Instance of the <see cref="T:Microsoft.EntityFrameworkCore.IDbContextFactory`1"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.Key">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.IsLogged">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.OptimizeDatabaseTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask">
            <summary>
            Class PeopleValidationTask.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask" /> class.
            </summary>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.Key">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.IsLogged">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.GetDefaultTriggers">
            <summary>
            Creates the triggers that define when the task will run.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the default trigger infos for this task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.PeopleValidationTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask">
            <summary>
            Plugin Update Task.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask},MediaBrowser.Common.Updates.IInstallationManager,MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask" /> class.
            </summary>
            <param name="logger">Instance of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface.</param>
            <param name="installationManager">Instance of the <see cref="T:MediaBrowser.Common.Updates.IInstallationManager"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.Key">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.IsLogged">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.PluginUpdateTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask">
            <summary>
            Class RefreshMediaLibraryTask.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask._libraryManager">
            <summary>
            The _library manager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask.#ctor(MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Model.Globalization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask" /> class.
            </summary>
            <param name="libraryManager">Instance of the <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="localization">Instance of the <see cref="T:MediaBrowser.Model.Globalization.ILocalizationManager"/> interface.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask.Name">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask.Description">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask.Category">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask.Key">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask.GetDefaultTriggers">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Tasks.RefreshMediaLibraryTask.ExecuteAsync(System.IProgress{System.Double},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger">
            <summary>
            Represents a task trigger that fires everyday.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger.#ctor(System.TimeSpan,MediaBrowser.Model.Tasks.TaskOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger"/> class.
            </summary>
            <param name="timeofDay">The time of day to trigger the task to run.</param>
            <param name="taskOptions">The options of this task.</param>
        </member>
        <member name="E:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger.Triggered">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger.TaskOptions">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger.Start(MediaBrowser.Model.Tasks.TaskResult,Microsoft.Extensions.Logging.ILogger,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger.Stop">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger.DisposeTimer">
            <summary>
            Disposes the timer.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger.OnTriggered">
            <summary>
            Called when [triggered].
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.DailyTrigger.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger">
            <summary>
            Represents a task trigger that runs repeatedly on an interval.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger.#ctor(System.TimeSpan,MediaBrowser.Model.Tasks.TaskOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger"/> class.
            </summary>
            <param name="interval">The interval.</param>
            <param name="taskOptions">The options of this task.</param>
        </member>
        <member name="E:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger.Triggered">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger.TaskOptions">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger.Start(MediaBrowser.Model.Tasks.TaskResult,Microsoft.Extensions.Logging.ILogger,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger.Stop">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger.DisposeTimer">
            <summary>
            Disposes the timer.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger.OnTriggered">
            <summary>
            Called when [triggered].
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.IntervalTrigger.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Triggers.StartupTrigger">
            <summary>
            Class StartupTaskTrigger.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.StartupTrigger.#ctor(MediaBrowser.Model.Tasks.TaskOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Triggers.StartupTrigger"/> class.
            </summary>
            <param name="taskOptions">The options of this task.</param>
        </member>
        <member name="E:Emby.Server.Implementations.ScheduledTasks.Triggers.StartupTrigger.Triggered">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Triggers.StartupTrigger.TaskOptions">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.StartupTrigger.Start(MediaBrowser.Model.Tasks.TaskResult,Microsoft.Extensions.Logging.ILogger,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.StartupTrigger.Stop">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.StartupTrigger.OnTriggered">
            <summary>
            Called when [triggered].
            </summary>
        </member>
        <member name="T:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger">
            <summary>
            Represents a task trigger that fires on a weekly basis.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.#ctor(System.TimeSpan,System.DayOfWeek,MediaBrowser.Model.Tasks.TaskOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger"/> class.
            </summary>
            <param name="timeofDay">The time of day to trigger the task to run.</param>
            <param name="dayOfWeek">The day of week.</param>
            <param name="taskOptions">The options of this task.</param>
        </member>
        <member name="E:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.Triggered">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.TaskOptions">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.Start(MediaBrowser.Model.Tasks.TaskResult,Microsoft.Extensions.Logging.ILogger,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.GetNextTriggerDateTime">
            <summary>
            Gets the next trigger date time.
            </summary>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.Stop">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.DisposeTimer">
            <summary>
            Disposes the timer.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.OnTriggered">
            <summary>
            Called when [triggered].
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ScheduledTasks.Triggers.WeeklyTrigger.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Serialization.MyXmlSerializer">
            <summary>
            Provides a wrapper around third party xml serialization.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Serialization.MyXmlSerializer.SerializeToWriter(System.Object,System.Xml.XmlWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="obj">The obj.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Serialization.MyXmlSerializer.DeserializeFromStream(System.Type,System.IO.Stream)">
            <summary>
            Deserializes from stream.
            </summary>
            <param name="type">The type.</param>
            <param name="stream">The stream.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Serialization.MyXmlSerializer.SerializeToStream(System.Object,System.IO.Stream)">
            <summary>
            Serializes to stream.
            </summary>
            <param name="obj">The obj.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Serialization.MyXmlSerializer.SerializeToFile(System.Object,System.String)">
            <summary>
            Serializes to file.
            </summary>
            <param name="obj">The obj.</param>
            <param name="file">The file.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Serialization.MyXmlSerializer.DeserializeFromFile(System.Type,System.String)">
            <summary>
            Deserializes from file.
            </summary>
            <param name="type">The type.</param>
            <param name="file">The file.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Serialization.MyXmlSerializer.DeserializeFromBytes(System.Type,System.Byte[])">
            <summary>
            Deserializes from bytes.
            </summary>
            <param name="type">The type.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.ServerApplicationPaths">
            <summary>
            Extends BaseApplicationPaths to add paths that are only applicable on the server.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.ServerApplicationPaths.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.ServerApplicationPaths" /> class.
            </summary>
            <param name="programDataPath">The path for Jellyfin's data.</param>
            <param name="logDirectoryPath">The path for Jellyfin's logging directory.</param>
            <param name="configurationDirectoryPath">The path for Jellyfin's configuration directory.</param>
            <param name="cacheDirectoryPath">The path for Jellyfin's cache directory.</param>
            <param name="webDirectoryPath">The path for Jellyfin's web UI.</param>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.RootFolderPath">
            <summary>
            Gets the path to the base root media directory.
            </summary>
            <value>The root folder path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.DefaultUserViewsPath">
            <summary>
            Gets the path to the default user view directory.  Used if no specific user view is defined.
            </summary>
            <value>The default user views path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.PeoplePath">
            <summary>
            Gets the path to the People directory.
            </summary>
            <value>The people path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.ArtistsPath">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.GenrePath">
            <summary>
            Gets the path to the Genre directory.
            </summary>
            <value>The genre path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.MusicGenrePath">
            <summary>
            Gets the path to the Genre directory.
            </summary>
            <value>The genre path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.StudioPath">
            <summary>
            Gets the path to the Studio directory.
            </summary>
            <value>The studio path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.YearPath">
            <summary>
            Gets the path to the Year directory.
            </summary>
            <value>The year path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.UserConfigurationDirectoryPath">
            <summary>
            Gets the path to the user configuration directory.
            </summary>
            <value>The user configuration directory path.</value>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.DefaultInternalMetadataPath">
            <inheritdoc/>
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.InternalMetadataPath">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.ServerApplicationPaths.VirtualInternalMetadataPath">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Session.SessionManager">
            <summary>
            Class SessionManager.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Session.SessionManager},MediaBrowser.Controller.Events.IEventManager,MediaBrowser.Controller.Library.IUserDataManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Library.ILibraryManager,MediaBrowser.Controller.Library.IUserManager,MediaBrowser.Controller.Library.IMusicManager,MediaBrowser.Controller.Dto.IDtoService,MediaBrowser.Controller.Drawing.IImageProcessor,MediaBrowser.Controller.IServerApplicationHost,MediaBrowser.Controller.Devices.IDeviceManager,MediaBrowser.Controller.Library.IMediaSourceManager,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Session.SessionManager"/> class.
            </summary>
            <param name="logger">Instance of <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> interface.</param>
            <param name="eventManager">Instance of <see cref="T:MediaBrowser.Controller.Events.IEventManager"/> interface.</param>
            <param name="userDataManager">Instance of <see cref="T:MediaBrowser.Controller.Library.IUserDataManager"/> interface.</param>
            <param name="serverConfigurationManager">Instance of <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/> interface.</param>
            <param name="libraryManager">Instance of <see cref="T:MediaBrowser.Controller.Library.ILibraryManager"/> interface.</param>
            <param name="userManager">Instance of <see cref="T:MediaBrowser.Controller.Library.IUserManager"/> interface.</param>
            <param name="musicManager">Instance of <see cref="T:MediaBrowser.Controller.Library.IMusicManager"/> interface.</param>
            <param name="dtoService">Instance of <see cref="T:MediaBrowser.Controller.Dto.IDtoService"/> interface.</param>
            <param name="imageProcessor">Instance of <see cref="T:MediaBrowser.Controller.Drawing.IImageProcessor"/> interface.</param>
            <param name="appHost">Instance of <see cref="T:MediaBrowser.Controller.IServerApplicationHost"/> interface.</param>
            <param name="deviceManager">Instance of <see cref="T:MediaBrowser.Controller.Devices.IDeviceManager"/> interface.</param>
            <param name="mediaSourceManager">Instance of <see cref="T:MediaBrowser.Controller.Library.IMediaSourceManager"/> interface.</param>
            <param name="hostApplicationLifetime">Instance of <see cref="T:Microsoft.Extensions.Hosting.IHostApplicationLifetime"/> interface.</param>
        </member>
        <member name="E:Emby.Server.Implementations.Session.SessionManager.PlaybackStart">
            <summary>
            Occurs when playback has started.
            </summary>
        </member>
        <member name="E:Emby.Server.Implementations.Session.SessionManager.PlaybackProgress">
            <summary>
            Occurs when playback has progressed.
            </summary>
        </member>
        <member name="E:Emby.Server.Implementations.Session.SessionManager.PlaybackStopped">
            <summary>
            Occurs when playback has stopped.
            </summary>
        </member>
        <member name="E:Emby.Server.Implementations.Session.SessionManager.SessionStarted">
            <inheritdoc />
        </member>
        <member name="E:Emby.Server.Implementations.Session.SessionManager.CapabilitiesChanged">
            <inheritdoc />
        </member>
        <member name="E:Emby.Server.Implementations.Session.SessionManager.SessionEnded">
            <inheritdoc />
        </member>
        <member name="E:Emby.Server.Implementations.Session.SessionManager.SessionActivity">
            <inheritdoc />
        </member>
        <member name="E:Emby.Server.Implementations.Session.SessionManager.SessionControllerConnected">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.Session.SessionManager.Sessions">
            <summary>
            Gets all connections.
            </summary>
            <value>All connections.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.UpdateDeviceName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.LogSessionActivity(System.String,System.String,System.String,System.String,System.String,Jellyfin.Data.Entities.User)">
            <summary>
            Logs the user activity.
            </summary>
            <param name="appName">Type of the client.</param>
            <param name="appVersion">The app version.</param>
            <param name="deviceId">The device id.</param>
            <param name="deviceName">Name of the device.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <param name="user">The user.</param>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.OnSessionControllerConnected(MediaBrowser.Controller.Session.SessionInfo)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.CloseIfNeededAsync(MediaBrowser.Controller.Session.SessionInfo)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.ReportSessionEnded(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.UpdateNowPlayingItem(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Model.Session.PlaybackProgressInfo,MediaBrowser.Controller.Entities.BaseItem,System.Boolean)">
            <summary>
            Updates the now playing item id.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.RemoveNowPlayingItem(MediaBrowser.Controller.Session.SessionInfo)">
            <summary>
            Removes the now playing item id.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.GetSessionInfo(System.String,System.String,System.String,System.String,System.String,Jellyfin.Data.Entities.User)">
            <summary>
            Gets the connection.
            </summary>
            <param name="appName">Type of the client.</param>
            <param name="appVersion">The app version.</param>
            <param name="deviceId">The device id.</param>
            <param name="deviceName">Name of the device.</param>
            <param name="remoteEndPoint">The remote end point.</param>
            <param name="user">The user.</param>
            <returns>SessionInfo.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.OnPlaybackStart(MediaBrowser.Model.Session.PlaybackStartInfo)">
            <summary>
            Used to report that playback has started for an item.
            </summary>
            <param name="info">The info.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"><c>info</c> is <c>null</c>.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.OnPlaybackStart(Jellyfin.Data.Entities.User,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Called when [playback start].
            </summary>
            <param name="user">The user object.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.OnPlaybackProgress(MediaBrowser.Model.Session.PlaybackProgressInfo)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.OnPlaybackProgress(MediaBrowser.Model.Session.PlaybackProgressInfo,System.Boolean)">
            <summary>
            Used to report playback progress for an item.
            </summary>
            <param name="info">The playback progress info.</param>
            <param name="isAutomated">Whether this is an automated update.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.OnPlaybackStopped(MediaBrowser.Model.Session.PlaybackStopInfo)">
            <summary>
            Used to report that playback has ended for an item.
            </summary>
            <param name="info">The info.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException"><c>info</c> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>info.PositionTicks</c> is <c>null</c> or negative.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.GetSession(System.String,System.Boolean)">
            <summary>
            Gets the session.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="throwOnMissing">if set to <c>true</c> [throw on missing].</param>
            <returns>SessionInfo.</returns>
            <exception cref="T:MediaBrowser.Common.Extensions.ResourceNotFoundException">
            No session with an Id equal to <c>sessionId</c> was found
            and <c>throwOnMissing</c> is <c>true</c>.
            </exception>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendMessageCommand(System.String,System.String,MediaBrowser.Model.Session.MessageCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendGeneralCommand(System.String,System.String,MediaBrowser.Model.Session.GeneralCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendPlayCommand(System.String,System.String,MediaBrowser.Model.Session.PlayRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendSyncPlayCommand(System.String,MediaBrowser.Model.SyncPlay.SendCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendSyncPlayGroupUpdate``1(System.String,MediaBrowser.Model.SyncPlay.GroupUpdate{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendBrowseCommand(System.String,System.String,MediaBrowser.Model.Session.BrowseRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendPlaystateCommand(System.String,System.String,MediaBrowser.Model.Session.PlaystateRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendRestartRequiredNotification(System.Threading.CancellationToken)">
            <summary>
            Sends the restart required message.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.AddAdditionalUser(System.String,System.Guid)">
            <summary>
            Adds the additional user.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="userId">The user identifier.</param>
            <exception cref="T:System.UnauthorizedAccessException">Cannot modify additional users without authenticating first.</exception>
            <exception cref="T:System.ArgumentException">The requested user is already the primary user of the session.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.RemoveAdditionalUser(System.String,System.Guid)">
            <summary>
            Removes the additional user.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="userId">The user identifier.</param>
            <exception cref="T:System.UnauthorizedAccessException">Cannot modify additional users without authenticating first.</exception>
            <exception cref="T:System.ArgumentException">The requested user is already the primary user of the session.</exception>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.AuthenticateNewSession(MediaBrowser.Controller.Session.AuthenticationRequest)">
            <summary>
            Authenticates the new session.
            </summary>
            <param name="request">The authenticationrequest.</param>
            <returns>The authentication result.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.AuthenticateDirect(MediaBrowser.Controller.Session.AuthenticationRequest)">
            <summary>
            Directly authenticates the session without enforcing password.
            </summary>
            <param name="request">The authentication request.</param>
            <returns>The authentication result.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.Logout(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.Logout(Jellyfin.Data.Entities.Security.Device)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.RevokeUserTokens(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.ReportCapabilities(System.String,MediaBrowser.Model.Session.ClientCapabilities)">
            <summary>
            Reports the capabilities.
            </summary>
            <param name="sessionId">The session identifier.</param>
            <param name="capabilities">The capabilities.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.GetItemInfo(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Dto.MediaSourceInfo)">
            <summary>
            Converts a BaseItem to a BaseItemInfo.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.ReportNowViewingItem(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.ReportTranscodingInfo(System.String,MediaBrowser.Model.Session.TranscodingInfo)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.ClearTranscodingInfo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.GetSession(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.GetSessionByAuthenticationToken(Jellyfin.Data.Entities.Security.Device,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.GetSessionByAuthenticationToken(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.GetSessions(System.Guid,System.String,System.Nullable{System.Int32},System.Nullable{System.Guid},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendMessageToAdminSessions``1(MediaBrowser.Model.Session.SessionMessageType,``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendMessageToUserSessions``1(System.Collections.Generic.List{System.Guid},MediaBrowser.Model.Session.SessionMessageType,System.Func{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendMessageToUserSessions``1(System.Collections.Generic.List{System.Guid},MediaBrowser.Model.Session.SessionMessageType,``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.SendMessageToUserDeviceSessions``1(System.String,MediaBrowser.Model.Session.SessionMessageType,``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionManager.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.Session.SessionWebSocketListener">
            <summary>
            Class SessionWebSocketListener.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Session.SessionWebSocketListener.WebSocketLostTimeout">
            <summary>
            The timeout in seconds after which a WebSocket is considered to be lost.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Session.SessionWebSocketListener.IntervalFactor">
            <summary>
            The keep-alive interval factor; controls how often the watcher will check on the status of the WebSockets.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Session.SessionWebSocketListener.ForceKeepAliveFactor">
            <summary>
            The ForceKeepAlive factor; controls when a ForceKeepAlive is sent.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Session.SessionWebSocketListener._webSockets">
            <summary>
            The WebSocket watchlist.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Session.SessionWebSocketListener._webSocketsLock">
            <summary>
            Lock used for accessing the WebSockets watchlist.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Session.SessionWebSocketListener._keepAlive">
            <summary>
            The KeepAlive cancellation token.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Session.SessionWebSocketListener},MediaBrowser.Controller.Session.ISessionManager,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Session.SessionWebSocketListener" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="sessionManager">The session manager.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.ProcessMessageAsync(MediaBrowser.Controller.Net.WebSocketMessageInfo)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.ProcessWebSocketConnectedAsync(MediaBrowser.Controller.Net.IWebSocketConnection,Microsoft.AspNetCore.Http.HttpContext)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.OnWebSocketClosed(System.Object,System.EventArgs)">
            <summary>
            Called when a WebSocket is closed.
            </summary>
            <param name="sender">The WebSocket.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.KeepAliveWebSocket(MediaBrowser.Controller.Net.IWebSocketConnection)">
            <summary>
            Adds a WebSocket to the KeepAlive watchlist.
            </summary>
            <param name="webSocket">The WebSocket to monitor.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.RemoveWebSocket(MediaBrowser.Controller.Net.IWebSocketConnection)">
            <summary>
            Removes a WebSocket from the KeepAlive watchlist.
            </summary>
            <param name="webSocket">The WebSocket to remove.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.KeepAliveSockets(System.Object,System.EventArgs)">
            <summary>
            Checks status of KeepAlive of WebSockets.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Session.SessionWebSocketListener.SendForceKeepAlive(MediaBrowser.Controller.Net.IWebSocketConnection)">
            <summary>
            Sends a ForceKeepAlive message to a WebSocket.
            </summary>
            <param name="webSocket">The WebSocket.</param>
            <returns>Task.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Session.WebSocketController.SupportsMediaControl">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.Session.WebSocketController.IsSessionActive">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.WebSocketController.SendMessage``1(MediaBrowser.Model.Session.SessionMessageType,System.Guid,``0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Session.WebSocketController.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.AiredEpisodeOrderComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.AiredEpisodeOrderComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.AlbumArtistComparer">
            <summary>
            Allows comparing artists of albums. Only the first artist of each album is considered.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.AlbumArtistComparer.Type">
            <summary>
            Gets the item type this comparer compares.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.AlbumArtistComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified arguments on their primary artist.
            </summary>
            <param name="x">First item to compare.</param>
            <param name="y">Second item to compare.</param>
            <returns>Zero if equal, else negative or positive number to indicate order.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.AlbumComparer">
            <summary>
            Class AlbumComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.AlbumComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.AlbumComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.AlbumComparer.GetValue(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the value.
            </summary>
            <param name="x">The x.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.ArtistComparer">
            <summary>
            Class ArtistComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.ArtistComparer.Type">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.ArtistComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.ArtistComparer.GetValue(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the value.
            </summary>
            <param name="x">The x.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.CommunityRatingComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.CommunityRatingComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.CriticRatingComparer">
            <summary>
            Class CriticRatingComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.CriticRatingComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.CriticRatingComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.DateCreatedComparer">
            <summary>
            Class DateCreatedComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DateCreatedComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.DateCreatedComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DateLastMediaAddedComparer.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DateLastMediaAddedComparer.UserManager">
            <summary>
            Gets or sets the user manager.
            </summary>
            <value>The user manager.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DateLastMediaAddedComparer.UserDataRepository">
            <summary>
            Gets or sets the user data repository.
            </summary>
            <value>The user data repository.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DateLastMediaAddedComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.DateLastMediaAddedComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.DateLastMediaAddedComparer.GetDate(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.DatePlayedComparer">
            <summary>
            Class DatePlayedComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DatePlayedComparer.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DatePlayedComparer.UserManager">
            <summary>
            Gets or sets the user manager.
            </summary>
            <value>The user manager.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DatePlayedComparer.UserDataRepository">
            <summary>
            Gets or sets the user data repository.
            </summary>
            <value>The user data repository.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.DatePlayedComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.DatePlayedComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.DatePlayedComparer.GetDate(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.IndexNumberComparer">
            <summary>
            Class IndexNumberComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IndexNumberComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IndexNumberComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsFavoriteOrLikeComparer.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsFavoriteOrLikeComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsFavoriteOrLikeComparer.UserDataRepository">
            <summary>
            Gets or sets the user data repository.
            </summary>
            <value>The user data repository.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsFavoriteOrLikeComparer.UserManager">
            <summary>
            Gets or sets the user manager.
            </summary>
            <value>The user manager.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IsFavoriteOrLikeComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IsFavoriteOrLikeComparer.GetValue(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsFolderComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IsFolderComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IsFolderComparer.GetValue(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the value.
            </summary>
            <param name="x">The x.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsPlayedComparer.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsPlayedComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsPlayedComparer.UserDataRepository">
            <summary>
            Gets or sets the user data repository.
            </summary>
            <value>The user data repository.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsPlayedComparer.UserManager">
            <summary>
            Gets or sets the user manager.
            </summary>
            <value>The user manager.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IsPlayedComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IsPlayedComparer.GetValue(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsUnplayedComparer.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsUnplayedComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsUnplayedComparer.UserDataRepository">
            <summary>
            Gets or sets the user data repository.
            </summary>
            <value>The user data repository.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.IsUnplayedComparer.UserManager">
            <summary>
            Gets or sets the user manager.
            </summary>
            <value>The user manager.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IsUnplayedComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.IsUnplayedComparer.GetValue(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.NameComparer">
            <summary>
            Class NameComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.NameComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.NameComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.OfficialRatingComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.OfficialRatingComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.ParentIndexNumberComparer">
            <summary>
            Class ParentIndexNumberComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.ParentIndexNumberComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.ParentIndexNumberComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.PlayCountComparer">
            <summary>
            Class PlayCountComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.PlayCountComparer.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.PlayCountComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.PlayCountComparer.UserDataRepository">
            <summary>
            Gets or sets the user data repository.
            </summary>
            <value>The user data repository.</value>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.PlayCountComparer.UserManager">
            <summary>
            Gets or sets the user manager.
            </summary>
            <value>The user manager.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.PlayCountComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.PlayCountComparer.GetValue(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.PremiereDateComparer">
            <summary>
            Class PremiereDateComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.PremiereDateComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.PremiereDateComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.PremiereDateComparer.GetDate(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.ProductionYearComparer">
            <summary>
            Class ProductionYearComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.ProductionYearComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.ProductionYearComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.ProductionYearComparer.GetValue(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.RandomComparer">
            <summary>
            Class RandomComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.RandomComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.RandomComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.RuntimeComparer">
            <summary>
            Class RuntimeComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.RuntimeComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.RuntimeComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.SeriesSortNameComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.SeriesSortNameComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Sorting.SortNameComparer">
            <summary>
            Class SortNameComparer.
            </summary>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.SortNameComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.SortNameComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.StartDateComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.StartDateComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.StartDateComparer.GetDate(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the date.
            </summary>
            <param name="x">The x.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="P:Emby.Server.Implementations.Sorting.StudioComparer.Type">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Emby.Server.Implementations.Sorting.StudioComparer.Compare(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.SyncPlay.Group">
            <summary>
            Class Group.
            </summary>
            <remarks>
            Class is not thread-safe, external locking is required when accessing methods.
            </remarks>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.Group._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.Group._loggerFactory">
            <summary>
            The logger factory.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.Group._userManager">
            <summary>
            The user manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.Group._sessionManager">
            <summary>
            The session manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.Group._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.Group._participants">
            <summary>
            The participants, or members of the group.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.Group._state">
            <summary>
            The internal group state.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,MediaBrowser.Controller.Library.IUserManager,MediaBrowser.Controller.Session.ISessionManager,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.SyncPlay.Group" /> class.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
            <param name="userManager">The user manager.</param>
            <param name="sessionManager">The session manager.</param>
            <param name="libraryManager">The library manager.</param>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.DefaultPing">
            <summary>
            Gets the default ping value used for sessions.
            </summary>
            <value>The default ping.</value>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.TimeSyncOffset">
            <summary>
            Gets the maximum time offset error accepted for dates reported by clients, in milliseconds.
            </summary>
            <value>The maximum time offset error.</value>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.MaxPlaybackOffset">
            <summary>
            Gets the maximum offset error accepted for position reported by clients, in milliseconds.
            </summary>
            <value>The maximum offset error.</value>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.GroupId">
            <summary>
            Gets the group identifier.
            </summary>
            <value>The group identifier.</value>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.GroupName">
            <summary>
            Gets the group name.
            </summary>
            <value>The group name.</value>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.PlayQueue">
            <summary>
            Gets the group identifier.
            </summary>
            <value>The group identifier.</value>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.RunTimeTicks">
            <summary>
            Gets the runtime ticks of current playing item.
            </summary>
            <value>The runtime ticks of current playing item.</value>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.PositionTicks">
            <summary>
            Gets or sets the position ticks.
            </summary>
            <value>The position ticks.</value>
        </member>
        <member name="P:Emby.Server.Implementations.SyncPlay.Group.LastActivity">
            <summary>
            Gets or sets the last activity.
            </summary>
            <value>The last activity.</value>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.AddSession(MediaBrowser.Controller.Session.SessionInfo)">
            <summary>
            Adds the session to the group.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.RemoveSession(MediaBrowser.Controller.Session.SessionInfo)">
            <summary>
            Removes the session from the group.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.FilterSessions(System.String,MediaBrowser.Model.SyncPlay.SyncPlayBroadcastType)">
            <summary>
            Filters sessions of this group.
            </summary>
            <param name="fromId">The current session identifier.</param>
            <param name="type">The filtering type.</param>
            <returns>The list of sessions matching the filter.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.HasAccessToQueue(Jellyfin.Data.Entities.User,System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Checks if a given user can access all items of a given queue, that is,
            the user has the required minimum parental access and has access to all required folders.
            </summary>
            <param name="user">The user.</param>
            <param name="queue">The queue.</param>
            <returns><c>true</c> if the user can access all the items in the queue, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.IsGroupEmpty">
            <summary>
            Checks if the group is empty.
            </summary>
            <returns><c>true</c> if the group is empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.CreateGroup(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.NewGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Initializes the group with the session's info.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SessionJoin(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.JoinGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the session to the group.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SessionLeave(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.LeaveGroupRequest,System.Threading.CancellationToken)">
            <summary>
            Removes the session from the group.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.HandleRequest(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest,System.Threading.CancellationToken)">
            <summary>
            Handles the requested action by the session.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The requested action.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.GetInfo">
            <summary>
            Gets the info about the group for the clients.
            </summary>
            <returns>The group info for the clients.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.HasAccessToPlayQueue(Jellyfin.Data.Entities.User)">
            <summary>
            Checks if a user has access to all content in the play queue.
            </summary>
            <param name="user">The user.</param>
            <returns><c>true</c> if the user can access the play queue; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SetIgnoreGroupWait(MediaBrowser.Controller.Session.SessionInfo,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SetState(MediaBrowser.Controller.SyncPlay.IGroupState)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SendGroupUpdate``1(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Model.SyncPlay.SyncPlayBroadcastType,MediaBrowser.Model.SyncPlay.GroupUpdate{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SendCommand(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Model.SyncPlay.SyncPlayBroadcastType,MediaBrowser.Model.SyncPlay.SendCommand,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.NewSyncPlayCommand(MediaBrowser.Model.SyncPlay.SendCommandType)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.NewSyncPlayGroupUpdate``1(MediaBrowser.Model.SyncPlay.GroupUpdateType,``0)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SanitizePositionTicks(System.Nullable{System.Int64})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.UpdatePing(MediaBrowser.Controller.Session.SessionInfo,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.GetHighestPing">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SetBuffering(MediaBrowser.Controller.Session.SessionInfo,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SetAllBuffering(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.IsBuffering">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SetPlayQueue(System.Collections.Generic.IReadOnlyList{System.Guid},System.Int32,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SetPlayingItem(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.ClearPlayQueue(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.RemoveFromPlayQueue(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.MoveItemInPlayQueue(System.Guid,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.AddToPlayQueue(System.Collections.Generic.IReadOnlyList{System.Guid},MediaBrowser.Model.SyncPlay.GroupQueueMode)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.RestartCurrentItem">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.NextItemInQueue">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.PreviousItemInQueue">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SetRepeatMode(MediaBrowser.Model.SyncPlay.GroupRepeatMode)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.SetShuffleMode(MediaBrowser.Model.SyncPlay.GroupShuffleMode)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.Group.GetPlayQueueUpdate(MediaBrowser.Model.SyncPlay.PlayQueueUpdateReason)">
            <inheritdoc />
        </member>
        <member name="T:Emby.Server.Implementations.SyncPlay.SyncPlayManager">
            <summary>
            Class SyncPlayManager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._loggerFactory">
            <summary>
            The logger factory.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._userManager">
            <summary>
            The user manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._sessionManager">
            <summary>
            The session manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._libraryManager">
            <summary>
            The library manager.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._activeUsers">
            <summary>
            The map between users and counter of active sessions.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._sessionToGroupMap">
            <summary>
            The map between sessions and groups.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._groups">
            <summary>
            The groups.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.SyncPlay.SyncPlayManager._groupsLock">
            <summary>
            Lock used for accessing multiple groups at once.
            </summary>
            <remarks>
            This lock has priority on locks made on <see cref="T:Emby.Server.Implementations.SyncPlay.Group"/>.
            </remarks>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,MediaBrowser.Controller.Library.IUserManager,MediaBrowser.Controller.Session.ISessionManager,MediaBrowser.Controller.Library.ILibraryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.SyncPlay.SyncPlayManager" /> class.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
            <param name="userManager">The user manager.</param>
            <param name="sessionManager">The session manager.</param>
            <param name="libraryManager">The library manager.</param>
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.NewGroup(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.NewGroupRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.JoinGroup(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.JoinGroupRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.LeaveGroup(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.LeaveGroupRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.ListGroups(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.Requests.ListGroupsRequest)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.HandleRequest(MediaBrowser.Controller.Session.SessionInfo,MediaBrowser.Controller.SyncPlay.IGroupPlaybackRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.IsUserActive(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SyncPlay.SyncPlayManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and optionally managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Emby.Server.Implementations.SystemManager">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SystemManager.#ctor(Microsoft.Extensions.Hosting.IHostApplicationLifetime,MediaBrowser.Controller.IServerApplicationHost,MediaBrowser.Controller.IServerApplicationPaths,MediaBrowser.Controller.Configuration.IServerConfigurationManager,Emby.Server.Implementations.IStartupOptions,MediaBrowser.Common.Updates.IInstallationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.SystemManager"/> class.
            </summary>
            <param name="applicationLifetime">Instance of <see cref="T:Microsoft.Extensions.Hosting.IHostApplicationLifetime"/>.</param>
            <param name="applicationHost">Instance of <see cref="T:MediaBrowser.Controller.IServerApplicationHost"/>.</param>
            <param name="applicationPaths">Instance of <see cref="T:MediaBrowser.Controller.IServerApplicationPaths"/>.</param>
            <param name="configurationManager">Instance of <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/>.</param>
            <param name="startupOptions">Instance of <see cref="T:Emby.Server.Implementations.IStartupOptions"/>.</param>
            <param name="installationManager">Instance of <see cref="T:MediaBrowser.Common.Updates.IInstallationManager"/>.</param>
        </member>
        <member name="M:Emby.Server.Implementations.SystemManager.GetSystemInfo(Microsoft.AspNetCore.Http.HttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SystemManager.GetPublicSystemInfo(Microsoft.AspNetCore.Http.HttpRequest)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SystemManager.Restart">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.SystemManager.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.TV.TVSeriesManager.GetNextUp(System.String,Jellyfin.Data.Entities.User,MediaBrowser.Controller.Dto.DtoOptions,System.Boolean,System.Boolean)">
            <summary>
            Gets the next up.
            </summary>
            <returns>Task{Episode}.</returns>
        </member>
        <member name="T:Emby.Server.Implementations.Updates.InstallationManager">
            <summary>
            Manages all install, uninstall, and update operations for the system and individual plugins.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Updates.InstallationManager._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Updates.InstallationManager._applicationHost">
            <summary>
            Gets the application host.
            </summary>
            <value>The application host.</value>
        </member>
        <member name="F:Emby.Server.Implementations.Updates.InstallationManager._currentInstallations">
            <summary>
            The current installations.
            </summary>
        </member>
        <member name="F:Emby.Server.Implementations.Updates.InstallationManager._completedInstallationsInternal">
            <summary>
            The completed installations.
            </summary>
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.#ctor(Microsoft.Extensions.Logging.ILogger{Emby.Server.Implementations.Updates.InstallationManager},MediaBrowser.Controller.IServerApplicationHost,MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Controller.Events.IEventManager,System.Net.Http.IHttpClientFactory,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Common.Plugins.IPluginManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Emby.Server.Implementations.Updates.InstallationManager"/> class.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/>.</param>
            <param name="appHost">The <see cref="T:MediaBrowser.Controller.IServerApplicationHost"/>.</param>
            <param name="appPaths">The <see cref="T:MediaBrowser.Common.Configuration.IApplicationPaths"/>.</param>
            <param name="eventManager">The <see cref="T:MediaBrowser.Controller.Events.IEventManager"/>.</param>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory"/>.</param>
            <param name="config">The <see cref="T:MediaBrowser.Controller.Configuration.IServerConfigurationManager"/>.</param>
            <param name="pluginManager">The <see cref="T:MediaBrowser.Common.Plugins.IPluginManager"/>.</param>
        </member>
        <member name="P:Emby.Server.Implementations.Updates.InstallationManager.CompletedInstallations">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.GetPackages(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.GetAvailablePackages(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.FilterPackages(System.Collections.Generic.IEnumerable{MediaBrowser.Model.Updates.PackageInfo},System.String,System.Guid,System.Version)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.GetCompatibleVersions(System.Collections.Generic.IEnumerable{MediaBrowser.Model.Updates.PackageInfo},System.String,System.Guid,System.Version,System.Version)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.GetAvailablePluginUpdates(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.InstallPackage(MediaBrowser.Model.Updates.InstallationInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.UninstallPlugin(MediaBrowser.Common.Plugins.LocalPlugin)">
            <summary>
            Uninstalls a plugin.
            </summary>
            <param name="plugin">The <see cref="T:MediaBrowser.Common.Plugins.LocalPlugin"/> to uninstall.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.CancelInstallation(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and optionally managed resources.
            </summary>
            <param name="dispose"><c>true</c> to release both managed and unmanaged resources or <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Emby.Server.Implementations.Updates.InstallationManager.MergeSortedList(System.Collections.Generic.IList{MediaBrowser.Model.Updates.VersionInfo},System.Collections.Generic.IList{MediaBrowser.Model.Updates.VersionInfo})">
            <summary>
            Merges two sorted lists.
            </summary>
            <param name="source">The source <see cref="T:System.Collections.Generic.IList`1"/> instance to merge.</param>
            <param name="dest">The destination <see cref="T:System.Collections.Generic.IList`1"/> instance to merge with.</param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsIgnoredRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsIgnoredRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LUFSRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LUFSRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LUFSRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LUFSRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LUFSRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LUFSRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LUFSRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LUFSRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LUFSRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LUFSRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsBoundary(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>Determines whether the specified index is a boundary.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
    </members>
</doc>
